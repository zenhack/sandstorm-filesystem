// Code generated by capnpc-go. DO NOT EDIT.

package filesystem

import (
	context "golang.org/x/net/context"
	strconv "strconv"
	util "zenhack.net/go/sandstorm/capnp/util"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Node struct{ Client capnp.Client }

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0x955400781a01b061

func (c Node) Stat(ctx context.Context, params func(Node_stat_Params) error, opts ...capnp.CallOption) Node_stat_Results_Promise {
	if c.Client == nil {
		return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Node_Server interface {
	Stat(Node_stat) error
}

func Node_ServerToClient(s Node_Server) Node {
	c, _ := s.(server.Closer)
	return Node{Client: server.New(Node_Methods(nil, s), c)}
}

func Node_Methods(methods []server.Method, s Node_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Node_stat{c, opts, Node_stat_Params{Struct: p}, Node_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Node_stat holds the arguments for a server call to Node.stat.
type Node_stat struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Node_stat_Params
	Results Node_stat_Results
}

type Node_stat_Params struct{ capnp.Struct }

// Node_stat_Params_TypeID is the unique identifier for the type Node_stat_Params.
const Node_stat_Params_TypeID = 0xed229a531671b762

func NewNode_stat_Params(s *capnp.Segment) (Node_stat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Node_stat_Params{st}, err
}

func NewRootNode_stat_Params(s *capnp.Segment) (Node_stat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Node_stat_Params{st}, err
}

func ReadRootNode_stat_Params(msg *capnp.Message) (Node_stat_Params, error) {
	root, err := msg.RootPtr()
	return Node_stat_Params{root.Struct()}, err
}

func (s Node_stat_Params) String() string {
	str, _ := text.Marshal(0xed229a531671b762, s.Struct)
	return str
}

func (s Node_stat_Params) FollowLinks() bool {
	return !s.Struct.Bit(0)
}

func (s Node_stat_Params) SetFollowLinks(v bool) {
	s.Struct.SetBit(0, !v)
}

// Node_stat_Params_List is a list of Node_stat_Params.
type Node_stat_Params_List struct{ capnp.List }

// NewNode_stat_Params creates a new list of Node_stat_Params.
func NewNode_stat_Params_List(s *capnp.Segment, sz int32) (Node_stat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Node_stat_Params_List{l}, err
}

func (s Node_stat_Params_List) At(i int) Node_stat_Params { return Node_stat_Params{s.List.Struct(i)} }

func (s Node_stat_Params_List) Set(i int, v Node_stat_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Node_stat_Params_List) String() string {
	str, _ := text.MarshalList(0xed229a531671b762, s.List)
	return str
}

// Node_stat_Params_Promise is a wrapper for a Node_stat_Params promised by a client call.
type Node_stat_Params_Promise struct{ *capnp.Pipeline }

func (p Node_stat_Params_Promise) Struct() (Node_stat_Params, error) {
	s, err := p.Pipeline.Struct()
	return Node_stat_Params{s}, err
}

type Node_stat_Results struct{ capnp.Struct }

// Node_stat_Results_TypeID is the unique identifier for the type Node_stat_Results.
const Node_stat_Results_TypeID = 0x9b162b0ca62537be

func NewNode_stat_Results(s *capnp.Segment) (Node_stat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Node_stat_Results{st}, err
}

func NewRootNode_stat_Results(s *capnp.Segment) (Node_stat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Node_stat_Results{st}, err
}

func ReadRootNode_stat_Results(msg *capnp.Message) (Node_stat_Results, error) {
	root, err := msg.RootPtr()
	return Node_stat_Results{root.Struct()}, err
}

func (s Node_stat_Results) String() string {
	str, _ := text.Marshal(0x9b162b0ca62537be, s.Struct)
	return str
}

func (s Node_stat_Results) Info() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s Node_stat_Results) HasInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Node_stat_Results) SetInfo(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s Node_stat_Results) NewInfo() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Node_stat_Results_List is a list of Node_stat_Results.
type Node_stat_Results_List struct{ capnp.List }

// NewNode_stat_Results creates a new list of Node_stat_Results.
func NewNode_stat_Results_List(s *capnp.Segment, sz int32) (Node_stat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Node_stat_Results_List{l}, err
}

func (s Node_stat_Results_List) At(i int) Node_stat_Results {
	return Node_stat_Results{s.List.Struct(i)}
}

func (s Node_stat_Results_List) Set(i int, v Node_stat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Node_stat_Results_List) String() string {
	str, _ := text.MarshalList(0x9b162b0ca62537be, s.List)
	return str
}

// Node_stat_Results_Promise is a wrapper for a Node_stat_Results promised by a client call.
type Node_stat_Results_Promise struct{ *capnp.Pipeline }

func (p Node_stat_Results_Promise) Struct() (Node_stat_Results, error) {
	s, err := p.Pipeline.Struct()
	return Node_stat_Results{s}, err
}

func (p Node_stat_Results_Promise) Info() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type StatInfo struct{ capnp.Struct }
type StatInfo_file StatInfo
type StatInfo_symlink StatInfo
type StatInfo_Which uint16

const (
	StatInfo_Which_dir     StatInfo_Which = 0
	StatInfo_Which_file    StatInfo_Which = 1
	StatInfo_Which_symlink StatInfo_Which = 2
)

func (w StatInfo_Which) String() string {
	const s = "dirfilesymlink"
	switch w {
	case StatInfo_Which_dir:
		return s[0:3]
	case StatInfo_Which_file:
		return s[3:7]
	case StatInfo_Which_symlink:
		return s[7:14]

	}
	return "StatInfo_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StatInfo_TypeID is the unique identifier for the type StatInfo.
const StatInfo_TypeID = 0xc749c282e476c082

func NewStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return StatInfo{st}, err
}

func NewRootStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return StatInfo{st}, err
}

func ReadRootStatInfo(msg *capnp.Message) (StatInfo, error) {
	root, err := msg.RootPtr()
	return StatInfo{root.Struct()}, err
}

func (s StatInfo) String() string {
	str, _ := text.Marshal(0xc749c282e476c082, s.Struct)
	return str
}

func (s StatInfo) Which() StatInfo_Which {
	return StatInfo_Which(s.Struct.Uint16(0))
}
func (s StatInfo) SetDir() {
	s.Struct.SetUint16(0, 0)

}

func (s StatInfo) File() StatInfo_file { return StatInfo_file(s) }

func (s StatInfo) SetFile() {
	s.Struct.SetUint16(0, 1)
}

func (s StatInfo_file) Size() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s StatInfo_file) SetSize(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s StatInfo) Symlink() StatInfo_symlink { return StatInfo_symlink(s) }

func (s StatInfo) SetSymlink() {
	s.Struct.SetUint16(0, 2)
}

func (s StatInfo_symlink) Target() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s StatInfo_symlink) HasTarget() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s StatInfo_symlink) TargetBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s StatInfo_symlink) SetTarget(v string) error {
	return s.Struct.SetText(0, v)
}

func (s StatInfo) Executable() bool {
	return s.Struct.Bit(16)
}

func (s StatInfo) SetExecutable(v bool) {
	s.Struct.SetBit(16, v)
}

func (s StatInfo) Writable() bool {
	return s.Struct.Bit(17)
}

func (s StatInfo) SetWritable(v bool) {
	s.Struct.SetBit(17, v)
}

// StatInfo_List is a list of StatInfo.
type StatInfo_List struct{ capnp.List }

// NewStatInfo creates a new list of StatInfo.
func NewStatInfo_List(s *capnp.Segment, sz int32) (StatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return StatInfo_List{l}, err
}

func (s StatInfo_List) At(i int) StatInfo { return StatInfo{s.List.Struct(i)} }

func (s StatInfo_List) Set(i int, v StatInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s StatInfo_List) String() string {
	str, _ := text.MarshalList(0xc749c282e476c082, s.List)
	return str
}

// StatInfo_Promise is a wrapper for a StatInfo promised by a client call.
type StatInfo_Promise struct{ *capnp.Pipeline }

func (p StatInfo_Promise) Struct() (StatInfo, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo{s}, err
}

func (p StatInfo_Promise) File() StatInfo_file_Promise { return StatInfo_file_Promise{p.Pipeline} }

// StatInfo_file_Promise is a wrapper for a StatInfo_file promised by a client call.
type StatInfo_file_Promise struct{ *capnp.Pipeline }

func (p StatInfo_file_Promise) Struct() (StatInfo_file, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo_file{s}, err
}

func (p StatInfo_Promise) Symlink() StatInfo_symlink_Promise {
	return StatInfo_symlink_Promise{p.Pipeline}
}

// StatInfo_symlink_Promise is a wrapper for a StatInfo_symlink promised by a client call.
type StatInfo_symlink_Promise struct{ *capnp.Pipeline }

func (p StatInfo_symlink_Promise) Struct() (StatInfo_symlink, error) {
	s, err := p.Pipeline.Struct()
	return StatInfo_symlink{s}, err
}

type Directory struct{ Client capnp.Client }

// Directory_TypeID is the unique identifier for the type Directory.
const Directory_TypeID = 0xce3039544779e0fc

func (c Directory) List(ctx context.Context, params func(Directory_list_Params) error, opts ...capnp.CallOption) Directory_list_Results_Promise {
	if c.Client == nil {
		return Directory_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Directory_list_Params{Struct: s}) }
	}
	return Directory_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Directory) Walk(ctx context.Context, params func(Directory_walk_Params) error, opts ...capnp.CallOption) Directory_walk_Results_Promise {
	if c.Client == nil {
		return Directory_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Directory_walk_Params{Struct: s}) }
	}
	return Directory_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Directory) Stat(ctx context.Context, params func(Node_stat_Params) error, opts ...capnp.CallOption) Node_stat_Results_Promise {
	if c.Client == nil {
		return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Directory_Server interface {
	List(Directory_list) error

	Walk(Directory_walk) error

	Stat(Node_stat) error
}

func Directory_ServerToClient(s Directory_Server) Directory {
	c, _ := s.(server.Closer)
	return Directory{Client: server.New(Directory_Methods(nil, s), c)}
}

func Directory_Methods(methods []server.Method, s Directory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Directory_list{c, opts, Directory_list_Params{Struct: p}, Directory_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Directory_walk{c, opts, Directory_walk_Params{Struct: p}, Directory_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Node_stat{c, opts, Node_stat_Params{Struct: p}, Node_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Directory_list holds the arguments for a server call to Directory.list.
type Directory_list struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Directory_list_Params
	Results Directory_list_Results
}

// Directory_walk holds the arguments for a server call to Directory.walk.
type Directory_walk struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Directory_walk_Params
	Results Directory_walk_Results
}

type Directory_Entry struct{ capnp.Struct }

// Directory_Entry_TypeID is the unique identifier for the type Directory_Entry.
const Directory_Entry_TypeID = 0xce7e877bb4ee9a8f

func NewDirectory_Entry(s *capnp.Segment) (Directory_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Directory_Entry{st}, err
}

func NewRootDirectory_Entry(s *capnp.Segment) (Directory_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Directory_Entry{st}, err
}

func ReadRootDirectory_Entry(msg *capnp.Message) (Directory_Entry, error) {
	root, err := msg.RootPtr()
	return Directory_Entry{root.Struct()}, err
}

func (s Directory_Entry) String() string {
	str, _ := text.Marshal(0xce7e877bb4ee9a8f, s.Struct)
	return str
}

func (s Directory_Entry) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Directory_Entry) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Directory_Entry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Directory_Entry) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Directory_Entry) Info() (StatInfo, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo{Struct: p.Struct()}, err
}

func (s Directory_Entry) HasInfo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Directory_Entry) SetInfo(v StatInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s Directory_Entry) NewInfo() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Directory_Entry_List is a list of Directory_Entry.
type Directory_Entry_List struct{ capnp.List }

// NewDirectory_Entry creates a new list of Directory_Entry.
func NewDirectory_Entry_List(s *capnp.Segment, sz int32) (Directory_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Directory_Entry_List{l}, err
}

func (s Directory_Entry_List) At(i int) Directory_Entry { return Directory_Entry{s.List.Struct(i)} }

func (s Directory_Entry_List) Set(i int, v Directory_Entry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_List) String() string {
	str, _ := text.MarshalList(0xce7e877bb4ee9a8f, s.List)
	return str
}

// Directory_Entry_Promise is a wrapper for a Directory_Entry promised by a client call.
type Directory_Entry_Promise struct{ *capnp.Pipeline }

func (p Directory_Entry_Promise) Struct() (Directory_Entry, error) {
	s, err := p.Pipeline.Struct()
	return Directory_Entry{s}, err
}

func (p Directory_Entry_Promise) Info() StatInfo_Promise {
	return StatInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type Directory_Entry_Stream struct{ Client capnp.Client }

// Directory_Entry_Stream_TypeID is the unique identifier for the type Directory_Entry_Stream.
const Directory_Entry_Stream_TypeID = 0x88b56c7e729acc32

func (c Directory_Entry_Stream) Push(ctx context.Context, params func(Directory_Entry_Stream_push_Params) error, opts ...capnp.CallOption) Directory_Entry_Stream_push_Results_Promise {
	if c.Client == nil {
		return Directory_Entry_Stream_push_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "push",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Directory_Entry_Stream_push_Params{Struct: s}) }
	}
	return Directory_Entry_Stream_push_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Directory_Entry_Stream) Done(ctx context.Context, params func(Directory_Entry_Stream_done_Params) error, opts ...capnp.CallOption) Directory_Entry_Stream_done_Results_Promise {
	if c.Client == nil {
		return Directory_Entry_Stream_done_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "done",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Directory_Entry_Stream_done_Params{Struct: s}) }
	}
	return Directory_Entry_Stream_done_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Directory_Entry_Stream_Server interface {
	Push(Directory_Entry_Stream_push) error

	Done(Directory_Entry_Stream_done) error
}

func Directory_Entry_Stream_ServerToClient(s Directory_Entry_Stream_Server) Directory_Entry_Stream {
	c, _ := s.(server.Closer)
	return Directory_Entry_Stream{Client: server.New(Directory_Entry_Stream_Methods(nil, s), c)}
}

func Directory_Entry_Stream_Methods(methods []server.Method, s Directory_Entry_Stream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "push",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Directory_Entry_Stream_push{c, opts, Directory_Entry_Stream_push_Params{Struct: p}, Directory_Entry_Stream_push_Results{Struct: r}}
			return s.Push(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "done",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Directory_Entry_Stream_done{c, opts, Directory_Entry_Stream_done_Params{Struct: p}, Directory_Entry_Stream_done_Results{Struct: r}}
			return s.Done(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	return methods
}

// Directory_Entry_Stream_push holds the arguments for a server call to Directory_Entry_Stream.push.
type Directory_Entry_Stream_push struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Directory_Entry_Stream_push_Params
	Results Directory_Entry_Stream_push_Results
}

// Directory_Entry_Stream_done holds the arguments for a server call to Directory_Entry_Stream.done.
type Directory_Entry_Stream_done struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Directory_Entry_Stream_done_Params
	Results Directory_Entry_Stream_done_Results
}

type Directory_Entry_Stream_push_Params struct{ capnp.Struct }

// Directory_Entry_Stream_push_Params_TypeID is the unique identifier for the type Directory_Entry_Stream_push_Params.
const Directory_Entry_Stream_push_Params_TypeID = 0xf6166f9688826248

func NewDirectory_Entry_Stream_push_Params(s *capnp.Segment) (Directory_Entry_Stream_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_Entry_Stream_push_Params{st}, err
}

func NewRootDirectory_Entry_Stream_push_Params(s *capnp.Segment) (Directory_Entry_Stream_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_Entry_Stream_push_Params{st}, err
}

func ReadRootDirectory_Entry_Stream_push_Params(msg *capnp.Message) (Directory_Entry_Stream_push_Params, error) {
	root, err := msg.RootPtr()
	return Directory_Entry_Stream_push_Params{root.Struct()}, err
}

func (s Directory_Entry_Stream_push_Params) String() string {
	str, _ := text.Marshal(0xf6166f9688826248, s.Struct)
	return str
}

func (s Directory_Entry_Stream_push_Params) Entries() (Directory_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Directory_Entry_List{List: p.List()}, err
}

func (s Directory_Entry_Stream_push_Params) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Directory_Entry_Stream_push_Params) SetEntries(v Directory_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Directory_Entry_List, preferring placement in s's segment.
func (s Directory_Entry_Stream_push_Params) NewEntries(n int32) (Directory_Entry_List, error) {
	l, err := NewDirectory_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Directory_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Directory_Entry_Stream_push_Params_List is a list of Directory_Entry_Stream_push_Params.
type Directory_Entry_Stream_push_Params_List struct{ capnp.List }

// NewDirectory_Entry_Stream_push_Params creates a new list of Directory_Entry_Stream_push_Params.
func NewDirectory_Entry_Stream_push_Params_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_Entry_Stream_push_Params_List{l}, err
}

func (s Directory_Entry_Stream_push_Params_List) At(i int) Directory_Entry_Stream_push_Params {
	return Directory_Entry_Stream_push_Params{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_push_Params_List) Set(i int, v Directory_Entry_Stream_push_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_push_Params_List) String() string {
	str, _ := text.MarshalList(0xf6166f9688826248, s.List)
	return str
}

// Directory_Entry_Stream_push_Params_Promise is a wrapper for a Directory_Entry_Stream_push_Params promised by a client call.
type Directory_Entry_Stream_push_Params_Promise struct{ *capnp.Pipeline }

func (p Directory_Entry_Stream_push_Params_Promise) Struct() (Directory_Entry_Stream_push_Params, error) {
	s, err := p.Pipeline.Struct()
	return Directory_Entry_Stream_push_Params{s}, err
}

type Directory_Entry_Stream_push_Results struct{ capnp.Struct }

// Directory_Entry_Stream_push_Results_TypeID is the unique identifier for the type Directory_Entry_Stream_push_Results.
const Directory_Entry_Stream_push_Results_TypeID = 0xbbfd72f3e045a1cb

func NewDirectory_Entry_Stream_push_Results(s *capnp.Segment) (Directory_Entry_Stream_push_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_push_Results{st}, err
}

func NewRootDirectory_Entry_Stream_push_Results(s *capnp.Segment) (Directory_Entry_Stream_push_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_push_Results{st}, err
}

func ReadRootDirectory_Entry_Stream_push_Results(msg *capnp.Message) (Directory_Entry_Stream_push_Results, error) {
	root, err := msg.RootPtr()
	return Directory_Entry_Stream_push_Results{root.Struct()}, err
}

func (s Directory_Entry_Stream_push_Results) String() string {
	str, _ := text.Marshal(0xbbfd72f3e045a1cb, s.Struct)
	return str
}

// Directory_Entry_Stream_push_Results_List is a list of Directory_Entry_Stream_push_Results.
type Directory_Entry_Stream_push_Results_List struct{ capnp.List }

// NewDirectory_Entry_Stream_push_Results creates a new list of Directory_Entry_Stream_push_Results.
func NewDirectory_Entry_Stream_push_Results_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_push_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_Entry_Stream_push_Results_List{l}, err
}

func (s Directory_Entry_Stream_push_Results_List) At(i int) Directory_Entry_Stream_push_Results {
	return Directory_Entry_Stream_push_Results{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_push_Results_List) Set(i int, v Directory_Entry_Stream_push_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_push_Results_List) String() string {
	str, _ := text.MarshalList(0xbbfd72f3e045a1cb, s.List)
	return str
}

// Directory_Entry_Stream_push_Results_Promise is a wrapper for a Directory_Entry_Stream_push_Results promised by a client call.
type Directory_Entry_Stream_push_Results_Promise struct{ *capnp.Pipeline }

func (p Directory_Entry_Stream_push_Results_Promise) Struct() (Directory_Entry_Stream_push_Results, error) {
	s, err := p.Pipeline.Struct()
	return Directory_Entry_Stream_push_Results{s}, err
}

type Directory_Entry_Stream_done_Params struct{ capnp.Struct }

// Directory_Entry_Stream_done_Params_TypeID is the unique identifier for the type Directory_Entry_Stream_done_Params.
const Directory_Entry_Stream_done_Params_TypeID = 0xbe65e735441bebd4

func NewDirectory_Entry_Stream_done_Params(s *capnp.Segment) (Directory_Entry_Stream_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Params{st}, err
}

func NewRootDirectory_Entry_Stream_done_Params(s *capnp.Segment) (Directory_Entry_Stream_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Params{st}, err
}

func ReadRootDirectory_Entry_Stream_done_Params(msg *capnp.Message) (Directory_Entry_Stream_done_Params, error) {
	root, err := msg.RootPtr()
	return Directory_Entry_Stream_done_Params{root.Struct()}, err
}

func (s Directory_Entry_Stream_done_Params) String() string {
	str, _ := text.Marshal(0xbe65e735441bebd4, s.Struct)
	return str
}

// Directory_Entry_Stream_done_Params_List is a list of Directory_Entry_Stream_done_Params.
type Directory_Entry_Stream_done_Params_List struct{ capnp.List }

// NewDirectory_Entry_Stream_done_Params creates a new list of Directory_Entry_Stream_done_Params.
func NewDirectory_Entry_Stream_done_Params_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_Entry_Stream_done_Params_List{l}, err
}

func (s Directory_Entry_Stream_done_Params_List) At(i int) Directory_Entry_Stream_done_Params {
	return Directory_Entry_Stream_done_Params{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_done_Params_List) Set(i int, v Directory_Entry_Stream_done_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_done_Params_List) String() string {
	str, _ := text.MarshalList(0xbe65e735441bebd4, s.List)
	return str
}

// Directory_Entry_Stream_done_Params_Promise is a wrapper for a Directory_Entry_Stream_done_Params promised by a client call.
type Directory_Entry_Stream_done_Params_Promise struct{ *capnp.Pipeline }

func (p Directory_Entry_Stream_done_Params_Promise) Struct() (Directory_Entry_Stream_done_Params, error) {
	s, err := p.Pipeline.Struct()
	return Directory_Entry_Stream_done_Params{s}, err
}

type Directory_Entry_Stream_done_Results struct{ capnp.Struct }

// Directory_Entry_Stream_done_Results_TypeID is the unique identifier for the type Directory_Entry_Stream_done_Results.
const Directory_Entry_Stream_done_Results_TypeID = 0xf9416c5b70b7b325

func NewDirectory_Entry_Stream_done_Results(s *capnp.Segment) (Directory_Entry_Stream_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Results{st}, err
}

func NewRootDirectory_Entry_Stream_done_Results(s *capnp.Segment) (Directory_Entry_Stream_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Results{st}, err
}

func ReadRootDirectory_Entry_Stream_done_Results(msg *capnp.Message) (Directory_Entry_Stream_done_Results, error) {
	root, err := msg.RootPtr()
	return Directory_Entry_Stream_done_Results{root.Struct()}, err
}

func (s Directory_Entry_Stream_done_Results) String() string {
	str, _ := text.Marshal(0xf9416c5b70b7b325, s.Struct)
	return str
}

// Directory_Entry_Stream_done_Results_List is a list of Directory_Entry_Stream_done_Results.
type Directory_Entry_Stream_done_Results_List struct{ capnp.List }

// NewDirectory_Entry_Stream_done_Results creates a new list of Directory_Entry_Stream_done_Results.
func NewDirectory_Entry_Stream_done_Results_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_Entry_Stream_done_Results_List{l}, err
}

func (s Directory_Entry_Stream_done_Results_List) At(i int) Directory_Entry_Stream_done_Results {
	return Directory_Entry_Stream_done_Results{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_done_Results_List) Set(i int, v Directory_Entry_Stream_done_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_done_Results_List) String() string {
	str, _ := text.MarshalList(0xf9416c5b70b7b325, s.List)
	return str
}

// Directory_Entry_Stream_done_Results_Promise is a wrapper for a Directory_Entry_Stream_done_Results promised by a client call.
type Directory_Entry_Stream_done_Results_Promise struct{ *capnp.Pipeline }

func (p Directory_Entry_Stream_done_Results_Promise) Struct() (Directory_Entry_Stream_done_Results, error) {
	s, err := p.Pipeline.Struct()
	return Directory_Entry_Stream_done_Results{s}, err
}

type Directory_list_Params struct{ capnp.Struct }

// Directory_list_Params_TypeID is the unique identifier for the type Directory_list_Params.
const Directory_list_Params_TypeID = 0xc9fd79ef566f6491

func NewDirectory_list_Params(s *capnp.Segment) (Directory_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_list_Params{st}, err
}

func NewRootDirectory_list_Params(s *capnp.Segment) (Directory_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_list_Params{st}, err
}

func ReadRootDirectory_list_Params(msg *capnp.Message) (Directory_list_Params, error) {
	root, err := msg.RootPtr()
	return Directory_list_Params{root.Struct()}, err
}

func (s Directory_list_Params) String() string {
	str, _ := text.Marshal(0xc9fd79ef566f6491, s.Struct)
	return str
}

func (s Directory_list_Params) Stream() Directory_Entry_Stream {
	p, _ := s.Struct.Ptr(0)
	return Directory_Entry_Stream{Client: p.Interface().Client()}
}

func (s Directory_list_Params) HasStream() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Directory_list_Params) SetStream(v Directory_Entry_Stream) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Directory_list_Params_List is a list of Directory_list_Params.
type Directory_list_Params_List struct{ capnp.List }

// NewDirectory_list_Params creates a new list of Directory_list_Params.
func NewDirectory_list_Params_List(s *capnp.Segment, sz int32) (Directory_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_list_Params_List{l}, err
}

func (s Directory_list_Params_List) At(i int) Directory_list_Params {
	return Directory_list_Params{s.List.Struct(i)}
}

func (s Directory_list_Params_List) Set(i int, v Directory_list_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_list_Params_List) String() string {
	str, _ := text.MarshalList(0xc9fd79ef566f6491, s.List)
	return str
}

// Directory_list_Params_Promise is a wrapper for a Directory_list_Params promised by a client call.
type Directory_list_Params_Promise struct{ *capnp.Pipeline }

func (p Directory_list_Params_Promise) Struct() (Directory_list_Params, error) {
	s, err := p.Pipeline.Struct()
	return Directory_list_Params{s}, err
}

func (p Directory_list_Params_Promise) Stream() Directory_Entry_Stream {
	return Directory_Entry_Stream{Client: p.Pipeline.GetPipeline(0).Client()}
}

type Directory_list_Results struct{ capnp.Struct }

// Directory_list_Results_TypeID is the unique identifier for the type Directory_list_Results.
const Directory_list_Results_TypeID = 0xc2126cc87a7099f2

func NewDirectory_list_Results(s *capnp.Segment) (Directory_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_list_Results{st}, err
}

func NewRootDirectory_list_Results(s *capnp.Segment) (Directory_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_list_Results{st}, err
}

func ReadRootDirectory_list_Results(msg *capnp.Message) (Directory_list_Results, error) {
	root, err := msg.RootPtr()
	return Directory_list_Results{root.Struct()}, err
}

func (s Directory_list_Results) String() string {
	str, _ := text.Marshal(0xc2126cc87a7099f2, s.Struct)
	return str
}

// Directory_list_Results_List is a list of Directory_list_Results.
type Directory_list_Results_List struct{ capnp.List }

// NewDirectory_list_Results creates a new list of Directory_list_Results.
func NewDirectory_list_Results_List(s *capnp.Segment, sz int32) (Directory_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_list_Results_List{l}, err
}

func (s Directory_list_Results_List) At(i int) Directory_list_Results {
	return Directory_list_Results{s.List.Struct(i)}
}

func (s Directory_list_Results_List) Set(i int, v Directory_list_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_list_Results_List) String() string {
	str, _ := text.MarshalList(0xc2126cc87a7099f2, s.List)
	return str
}

// Directory_list_Results_Promise is a wrapper for a Directory_list_Results promised by a client call.
type Directory_list_Results_Promise struct{ *capnp.Pipeline }

func (p Directory_list_Results_Promise) Struct() (Directory_list_Results, error) {
	s, err := p.Pipeline.Struct()
	return Directory_list_Results{s}, err
}

type Directory_walk_Params struct{ capnp.Struct }

// Directory_walk_Params_TypeID is the unique identifier for the type Directory_walk_Params.
const Directory_walk_Params_TypeID = 0xb16b8959a58277ee

func NewDirectory_walk_Params(s *capnp.Segment) (Directory_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Params{st}, err
}

func NewRootDirectory_walk_Params(s *capnp.Segment) (Directory_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Params{st}, err
}

func ReadRootDirectory_walk_Params(msg *capnp.Message) (Directory_walk_Params, error) {
	root, err := msg.RootPtr()
	return Directory_walk_Params{root.Struct()}, err
}

func (s Directory_walk_Params) String() string {
	str, _ := text.Marshal(0xb16b8959a58277ee, s.Struct)
	return str
}

func (s Directory_walk_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Directory_walk_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Directory_walk_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Directory_walk_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Directory_walk_Params_List is a list of Directory_walk_Params.
type Directory_walk_Params_List struct{ capnp.List }

// NewDirectory_walk_Params creates a new list of Directory_walk_Params.
func NewDirectory_walk_Params_List(s *capnp.Segment, sz int32) (Directory_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_walk_Params_List{l}, err
}

func (s Directory_walk_Params_List) At(i int) Directory_walk_Params {
	return Directory_walk_Params{s.List.Struct(i)}
}

func (s Directory_walk_Params_List) Set(i int, v Directory_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb16b8959a58277ee, s.List)
	return str
}

// Directory_walk_Params_Promise is a wrapper for a Directory_walk_Params promised by a client call.
type Directory_walk_Params_Promise struct{ *capnp.Pipeline }

func (p Directory_walk_Params_Promise) Struct() (Directory_walk_Params, error) {
	s, err := p.Pipeline.Struct()
	return Directory_walk_Params{s}, err
}

type Directory_walk_Results struct{ capnp.Struct }

// Directory_walk_Results_TypeID is the unique identifier for the type Directory_walk_Results.
const Directory_walk_Results_TypeID = 0x8353ac6eac2573f2

func NewDirectory_walk_Results(s *capnp.Segment) (Directory_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Results{st}, err
}

func NewRootDirectory_walk_Results(s *capnp.Segment) (Directory_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Results{st}, err
}

func ReadRootDirectory_walk_Results(msg *capnp.Message) (Directory_walk_Results, error) {
	root, err := msg.RootPtr()
	return Directory_walk_Results{root.Struct()}, err
}

func (s Directory_walk_Results) String() string {
	str, _ := text.Marshal(0x8353ac6eac2573f2, s.Struct)
	return str
}

func (s Directory_walk_Results) Node() Node {
	p, _ := s.Struct.Ptr(0)
	return Node{Client: p.Interface().Client()}
}

func (s Directory_walk_Results) HasNode() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Directory_walk_Results) SetNode(v Node) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Directory_walk_Results_List is a list of Directory_walk_Results.
type Directory_walk_Results_List struct{ capnp.List }

// NewDirectory_walk_Results creates a new list of Directory_walk_Results.
func NewDirectory_walk_Results_List(s *capnp.Segment, sz int32) (Directory_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_walk_Results_List{l}, err
}

func (s Directory_walk_Results_List) At(i int) Directory_walk_Results {
	return Directory_walk_Results{s.List.Struct(i)}
}

func (s Directory_walk_Results_List) Set(i int, v Directory_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x8353ac6eac2573f2, s.List)
	return str
}

// Directory_walk_Results_Promise is a wrapper for a Directory_walk_Results promised by a client call.
type Directory_walk_Results_Promise struct{ *capnp.Pipeline }

func (p Directory_walk_Results_Promise) Struct() (Directory_walk_Results, error) {
	s, err := p.Pipeline.Struct()
	return Directory_walk_Results{s}, err
}

func (p Directory_walk_Results_Promise) Node() Node {
	return Node{Client: p.Pipeline.GetPipeline(0).Client()}
}

type RwDirectory struct{ Client capnp.Client }

// RwDirectory_TypeID is the unique identifier for the type RwDirectory.
const RwDirectory_TypeID = 0xdffe2836f5c5dffc

func (c RwDirectory) Create(ctx context.Context, params func(RwDirectory_create_Params) error, opts ...capnp.CallOption) RwDirectory_create_Results_Promise {
	if c.Client == nil {
		return RwDirectory_create_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "create",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(RwDirectory_create_Params{Struct: s}) }
	}
	return RwDirectory_create_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwDirectory) Mkdir(ctx context.Context, params func(RwDirectory_mkdir_Params) error, opts ...capnp.CallOption) RwDirectory_mkdir_Results_Promise {
	if c.Client == nil {
		return RwDirectory_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "mkdir",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(RwDirectory_mkdir_Params{Struct: s}) }
	}
	return RwDirectory_mkdir_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwDirectory) Delete(ctx context.Context, params func(RwDirectory_delete_Params) error, opts ...capnp.CallOption) RwDirectory_delete_Results_Promise {
	if c.Client == nil {
		return RwDirectory_delete_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "delete",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(RwDirectory_delete_Params{Struct: s}) }
	}
	return RwDirectory_delete_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwDirectory) List(ctx context.Context, params func(Directory_list_Params) error, opts ...capnp.CallOption) Directory_list_Results_Promise {
	if c.Client == nil {
		return Directory_list_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Directory_list_Params{Struct: s}) }
	}
	return Directory_list_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwDirectory) Walk(ctx context.Context, params func(Directory_walk_Params) error, opts ...capnp.CallOption) Directory_walk_Results_Promise {
	if c.Client == nil {
		return Directory_walk_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Directory_walk_Params{Struct: s}) }
	}
	return Directory_walk_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwDirectory) Stat(ctx context.Context, params func(Node_stat_Params) error, opts ...capnp.CallOption) Node_stat_Results_Promise {
	if c.Client == nil {
		return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type RwDirectory_Server interface {
	Create(RwDirectory_create) error

	Mkdir(RwDirectory_mkdir) error

	Delete(RwDirectory_delete) error

	List(Directory_list) error

	Walk(Directory_walk) error

	Stat(Node_stat) error
}

func RwDirectory_ServerToClient(s RwDirectory_Server) RwDirectory {
	c, _ := s.(server.Closer)
	return RwDirectory{Client: server.New(RwDirectory_Methods(nil, s), c)}
}

func RwDirectory_Methods(methods []server.Method, s RwDirectory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "create",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := RwDirectory_create{c, opts, RwDirectory_create_Params{Struct: p}, RwDirectory_create_Results{Struct: r}}
			return s.Create(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "mkdir",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := RwDirectory_mkdir{c, opts, RwDirectory_mkdir_Params{Struct: p}, RwDirectory_mkdir_Results{Struct: r}}
			return s.Mkdir(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "delete",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := RwDirectory_delete{c, opts, RwDirectory_delete_Params{Struct: p}, RwDirectory_delete_Results{Struct: r}}
			return s.Delete(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Directory_list{c, opts, Directory_list_Params{Struct: p}, Directory_list_Results{Struct: r}}
			return s.List(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Directory_walk{c, opts, Directory_walk_Params{Struct: p}, Directory_walk_Results{Struct: r}}
			return s.Walk(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Node_stat{c, opts, Node_stat_Params{Struct: p}, Node_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// RwDirectory_create holds the arguments for a server call to RwDirectory.create.
type RwDirectory_create struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  RwDirectory_create_Params
	Results RwDirectory_create_Results
}

// RwDirectory_mkdir holds the arguments for a server call to RwDirectory.mkdir.
type RwDirectory_mkdir struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  RwDirectory_mkdir_Params
	Results RwDirectory_mkdir_Results
}

// RwDirectory_delete holds the arguments for a server call to RwDirectory.delete.
type RwDirectory_delete struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  RwDirectory_delete_Params
	Results RwDirectory_delete_Results
}

type RwDirectory_create_Params struct{ capnp.Struct }

// RwDirectory_create_Params_TypeID is the unique identifier for the type RwDirectory_create_Params.
const RwDirectory_create_Params_TypeID = 0xedd8b7765a623c77

func NewRwDirectory_create_Params(s *capnp.Segment) (RwDirectory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RwDirectory_create_Params{st}, err
}

func NewRootRwDirectory_create_Params(s *capnp.Segment) (RwDirectory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RwDirectory_create_Params{st}, err
}

func ReadRootRwDirectory_create_Params(msg *capnp.Message) (RwDirectory_create_Params, error) {
	root, err := msg.RootPtr()
	return RwDirectory_create_Params{root.Struct()}, err
}

func (s RwDirectory_create_Params) String() string {
	str, _ := text.Marshal(0xedd8b7765a623c77, s.Struct)
	return str
}

func (s RwDirectory_create_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RwDirectory_create_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RwDirectory_create_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RwDirectory_create_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RwDirectory_create_Params) Executable() bool {
	return s.Struct.Bit(0)
}

func (s RwDirectory_create_Params) SetExecutable(v bool) {
	s.Struct.SetBit(0, v)
}

// RwDirectory_create_Params_List is a list of RwDirectory_create_Params.
type RwDirectory_create_Params_List struct{ capnp.List }

// NewRwDirectory_create_Params creates a new list of RwDirectory_create_Params.
func NewRwDirectory_create_Params_List(s *capnp.Segment, sz int32) (RwDirectory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return RwDirectory_create_Params_List{l}, err
}

func (s RwDirectory_create_Params_List) At(i int) RwDirectory_create_Params {
	return RwDirectory_create_Params{s.List.Struct(i)}
}

func (s RwDirectory_create_Params_List) Set(i int, v RwDirectory_create_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_create_Params_List) String() string {
	str, _ := text.MarshalList(0xedd8b7765a623c77, s.List)
	return str
}

// RwDirectory_create_Params_Promise is a wrapper for a RwDirectory_create_Params promised by a client call.
type RwDirectory_create_Params_Promise struct{ *capnp.Pipeline }

func (p RwDirectory_create_Params_Promise) Struct() (RwDirectory_create_Params, error) {
	s, err := p.Pipeline.Struct()
	return RwDirectory_create_Params{s}, err
}

type RwDirectory_create_Results struct{ capnp.Struct }

// RwDirectory_create_Results_TypeID is the unique identifier for the type RwDirectory_create_Results.
const RwDirectory_create_Results_TypeID = 0xccdb75f03a83cd44

func NewRwDirectory_create_Results(s *capnp.Segment) (RwDirectory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_create_Results{st}, err
}

func NewRootRwDirectory_create_Results(s *capnp.Segment) (RwDirectory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_create_Results{st}, err
}

func ReadRootRwDirectory_create_Results(msg *capnp.Message) (RwDirectory_create_Results, error) {
	root, err := msg.RootPtr()
	return RwDirectory_create_Results{root.Struct()}, err
}

func (s RwDirectory_create_Results) String() string {
	str, _ := text.Marshal(0xccdb75f03a83cd44, s.Struct)
	return str
}

func (s RwDirectory_create_Results) File() RwFile {
	p, _ := s.Struct.Ptr(0)
	return RwFile{Client: p.Interface().Client()}
}

func (s RwDirectory_create_Results) HasFile() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RwDirectory_create_Results) SetFile(v RwFile) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RwDirectory_create_Results_List is a list of RwDirectory_create_Results.
type RwDirectory_create_Results_List struct{ capnp.List }

// NewRwDirectory_create_Results creates a new list of RwDirectory_create_Results.
func NewRwDirectory_create_Results_List(s *capnp.Segment, sz int32) (RwDirectory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_create_Results_List{l}, err
}

func (s RwDirectory_create_Results_List) At(i int) RwDirectory_create_Results {
	return RwDirectory_create_Results{s.List.Struct(i)}
}

func (s RwDirectory_create_Results_List) Set(i int, v RwDirectory_create_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_create_Results_List) String() string {
	str, _ := text.MarshalList(0xccdb75f03a83cd44, s.List)
	return str
}

// RwDirectory_create_Results_Promise is a wrapper for a RwDirectory_create_Results promised by a client call.
type RwDirectory_create_Results_Promise struct{ *capnp.Pipeline }

func (p RwDirectory_create_Results_Promise) Struct() (RwDirectory_create_Results, error) {
	s, err := p.Pipeline.Struct()
	return RwDirectory_create_Results{s}, err
}

func (p RwDirectory_create_Results_Promise) File() RwFile {
	return RwFile{Client: p.Pipeline.GetPipeline(0).Client()}
}

type RwDirectory_mkdir_Params struct{ capnp.Struct }

// RwDirectory_mkdir_Params_TypeID is the unique identifier for the type RwDirectory_mkdir_Params.
const RwDirectory_mkdir_Params_TypeID = 0xc264d071767f0ab6

func NewRwDirectory_mkdir_Params(s *capnp.Segment) (RwDirectory_mkdir_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Params{st}, err
}

func NewRootRwDirectory_mkdir_Params(s *capnp.Segment) (RwDirectory_mkdir_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Params{st}, err
}

func ReadRootRwDirectory_mkdir_Params(msg *capnp.Message) (RwDirectory_mkdir_Params, error) {
	root, err := msg.RootPtr()
	return RwDirectory_mkdir_Params{root.Struct()}, err
}

func (s RwDirectory_mkdir_Params) String() string {
	str, _ := text.Marshal(0xc264d071767f0ab6, s.Struct)
	return str
}

func (s RwDirectory_mkdir_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RwDirectory_mkdir_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RwDirectory_mkdir_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RwDirectory_mkdir_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// RwDirectory_mkdir_Params_List is a list of RwDirectory_mkdir_Params.
type RwDirectory_mkdir_Params_List struct{ capnp.List }

// NewRwDirectory_mkdir_Params creates a new list of RwDirectory_mkdir_Params.
func NewRwDirectory_mkdir_Params_List(s *capnp.Segment, sz int32) (RwDirectory_mkdir_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_mkdir_Params_List{l}, err
}

func (s RwDirectory_mkdir_Params_List) At(i int) RwDirectory_mkdir_Params {
	return RwDirectory_mkdir_Params{s.List.Struct(i)}
}

func (s RwDirectory_mkdir_Params_List) Set(i int, v RwDirectory_mkdir_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_mkdir_Params_List) String() string {
	str, _ := text.MarshalList(0xc264d071767f0ab6, s.List)
	return str
}

// RwDirectory_mkdir_Params_Promise is a wrapper for a RwDirectory_mkdir_Params promised by a client call.
type RwDirectory_mkdir_Params_Promise struct{ *capnp.Pipeline }

func (p RwDirectory_mkdir_Params_Promise) Struct() (RwDirectory_mkdir_Params, error) {
	s, err := p.Pipeline.Struct()
	return RwDirectory_mkdir_Params{s}, err
}

type RwDirectory_mkdir_Results struct{ capnp.Struct }

// RwDirectory_mkdir_Results_TypeID is the unique identifier for the type RwDirectory_mkdir_Results.
const RwDirectory_mkdir_Results_TypeID = 0xb7774b1c65f804fa

func NewRwDirectory_mkdir_Results(s *capnp.Segment) (RwDirectory_mkdir_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Results{st}, err
}

func NewRootRwDirectory_mkdir_Results(s *capnp.Segment) (RwDirectory_mkdir_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Results{st}, err
}

func ReadRootRwDirectory_mkdir_Results(msg *capnp.Message) (RwDirectory_mkdir_Results, error) {
	root, err := msg.RootPtr()
	return RwDirectory_mkdir_Results{root.Struct()}, err
}

func (s RwDirectory_mkdir_Results) String() string {
	str, _ := text.Marshal(0xb7774b1c65f804fa, s.Struct)
	return str
}

func (s RwDirectory_mkdir_Results) Dir() RwDirectory {
	p, _ := s.Struct.Ptr(0)
	return RwDirectory{Client: p.Interface().Client()}
}

func (s RwDirectory_mkdir_Results) HasDir() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RwDirectory_mkdir_Results) SetDir(v RwDirectory) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RwDirectory_mkdir_Results_List is a list of RwDirectory_mkdir_Results.
type RwDirectory_mkdir_Results_List struct{ capnp.List }

// NewRwDirectory_mkdir_Results creates a new list of RwDirectory_mkdir_Results.
func NewRwDirectory_mkdir_Results_List(s *capnp.Segment, sz int32) (RwDirectory_mkdir_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_mkdir_Results_List{l}, err
}

func (s RwDirectory_mkdir_Results_List) At(i int) RwDirectory_mkdir_Results {
	return RwDirectory_mkdir_Results{s.List.Struct(i)}
}

func (s RwDirectory_mkdir_Results_List) Set(i int, v RwDirectory_mkdir_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_mkdir_Results_List) String() string {
	str, _ := text.MarshalList(0xb7774b1c65f804fa, s.List)
	return str
}

// RwDirectory_mkdir_Results_Promise is a wrapper for a RwDirectory_mkdir_Results promised by a client call.
type RwDirectory_mkdir_Results_Promise struct{ *capnp.Pipeline }

func (p RwDirectory_mkdir_Results_Promise) Struct() (RwDirectory_mkdir_Results, error) {
	s, err := p.Pipeline.Struct()
	return RwDirectory_mkdir_Results{s}, err
}

func (p RwDirectory_mkdir_Results_Promise) Dir() RwDirectory {
	return RwDirectory{Client: p.Pipeline.GetPipeline(0).Client()}
}

type RwDirectory_delete_Params struct{ capnp.Struct }

// RwDirectory_delete_Params_TypeID is the unique identifier for the type RwDirectory_delete_Params.
const RwDirectory_delete_Params_TypeID = 0xcf03bca4fb87f453

func NewRwDirectory_delete_Params(s *capnp.Segment) (RwDirectory_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_delete_Params{st}, err
}

func NewRootRwDirectory_delete_Params(s *capnp.Segment) (RwDirectory_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_delete_Params{st}, err
}

func ReadRootRwDirectory_delete_Params(msg *capnp.Message) (RwDirectory_delete_Params, error) {
	root, err := msg.RootPtr()
	return RwDirectory_delete_Params{root.Struct()}, err
}

func (s RwDirectory_delete_Params) String() string {
	str, _ := text.Marshal(0xcf03bca4fb87f453, s.Struct)
	return str
}

func (s RwDirectory_delete_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RwDirectory_delete_Params) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RwDirectory_delete_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RwDirectory_delete_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// RwDirectory_delete_Params_List is a list of RwDirectory_delete_Params.
type RwDirectory_delete_Params_List struct{ capnp.List }

// NewRwDirectory_delete_Params creates a new list of RwDirectory_delete_Params.
func NewRwDirectory_delete_Params_List(s *capnp.Segment, sz int32) (RwDirectory_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_delete_Params_List{l}, err
}

func (s RwDirectory_delete_Params_List) At(i int) RwDirectory_delete_Params {
	return RwDirectory_delete_Params{s.List.Struct(i)}
}

func (s RwDirectory_delete_Params_List) Set(i int, v RwDirectory_delete_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_delete_Params_List) String() string {
	str, _ := text.MarshalList(0xcf03bca4fb87f453, s.List)
	return str
}

// RwDirectory_delete_Params_Promise is a wrapper for a RwDirectory_delete_Params promised by a client call.
type RwDirectory_delete_Params_Promise struct{ *capnp.Pipeline }

func (p RwDirectory_delete_Params_Promise) Struct() (RwDirectory_delete_Params, error) {
	s, err := p.Pipeline.Struct()
	return RwDirectory_delete_Params{s}, err
}

type RwDirectory_delete_Results struct{ capnp.Struct }

// RwDirectory_delete_Results_TypeID is the unique identifier for the type RwDirectory_delete_Results.
const RwDirectory_delete_Results_TypeID = 0xff0de3e62887d2f0

func NewRwDirectory_delete_Results(s *capnp.Segment) (RwDirectory_delete_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwDirectory_delete_Results{st}, err
}

func NewRootRwDirectory_delete_Results(s *capnp.Segment) (RwDirectory_delete_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwDirectory_delete_Results{st}, err
}

func ReadRootRwDirectory_delete_Results(msg *capnp.Message) (RwDirectory_delete_Results, error) {
	root, err := msg.RootPtr()
	return RwDirectory_delete_Results{root.Struct()}, err
}

func (s RwDirectory_delete_Results) String() string {
	str, _ := text.Marshal(0xff0de3e62887d2f0, s.Struct)
	return str
}

// RwDirectory_delete_Results_List is a list of RwDirectory_delete_Results.
type RwDirectory_delete_Results_List struct{ capnp.List }

// NewRwDirectory_delete_Results creates a new list of RwDirectory_delete_Results.
func NewRwDirectory_delete_Results_List(s *capnp.Segment, sz int32) (RwDirectory_delete_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RwDirectory_delete_Results_List{l}, err
}

func (s RwDirectory_delete_Results_List) At(i int) RwDirectory_delete_Results {
	return RwDirectory_delete_Results{s.List.Struct(i)}
}

func (s RwDirectory_delete_Results_List) Set(i int, v RwDirectory_delete_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_delete_Results_List) String() string {
	str, _ := text.MarshalList(0xff0de3e62887d2f0, s.List)
	return str
}

// RwDirectory_delete_Results_Promise is a wrapper for a RwDirectory_delete_Results promised by a client call.
type RwDirectory_delete_Results_Promise struct{ *capnp.Pipeline }

func (p RwDirectory_delete_Results_Promise) Struct() (RwDirectory_delete_Results, error) {
	s, err := p.Pipeline.Struct()
	return RwDirectory_delete_Results{s}, err
}

type File struct{ Client capnp.Client }

// File_TypeID is the unique identifier for the type File.
const File_TypeID = 0xaa5b133d60884bbd

func (c File) Read(ctx context.Context, params func(File_read_Params) error, opts ...capnp.CallOption) File_read_Results_Promise {
	if c.Client == nil {
		return File_read_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(File_read_Params{Struct: s}) }
	}
	return File_read_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c File) Stat(ctx context.Context, params func(Node_stat_Params) error, opts ...capnp.CallOption) Node_stat_Results_Promise {
	if c.Client == nil {
		return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type File_Server interface {
	Read(File_read) error

	Stat(Node_stat) error
}

func File_ServerToClient(s File_Server) File {
	c, _ := s.(server.Closer)
	return File{Client: server.New(File_Methods(nil, s), c)}
}

func File_Methods(methods []server.Method, s File_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := File_read{c, opts, File_read_Params{Struct: p}, File_read_Results{Struct: r}}
			return s.Read(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Node_stat{c, opts, Node_stat_Params{Struct: p}, Node_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// File_read holds the arguments for a server call to File.read.
type File_read struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  File_read_Params
	Results File_read_Results
}

type File_read_Params struct{ capnp.Struct }

// File_read_Params_TypeID is the unique identifier for the type File_read_Params.
const File_read_Params_TypeID = 0xfb1101f5d0d1edeb

func NewFile_read_Params(s *capnp.Segment) (File_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return File_read_Params{st}, err
}

func NewRootFile_read_Params(s *capnp.Segment) (File_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return File_read_Params{st}, err
}

func ReadRootFile_read_Params(msg *capnp.Message) (File_read_Params, error) {
	root, err := msg.RootPtr()
	return File_read_Params{root.Struct()}, err
}

func (s File_read_Params) String() string {
	str, _ := text.Marshal(0xfb1101f5d0d1edeb, s.Struct)
	return str
}

func (s File_read_Params) StartAt() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s File_read_Params) SetStartAt(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s File_read_Params) Amount() uint64 {
	return s.Struct.Uint64(8)
}

func (s File_read_Params) SetAmount(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s File_read_Params) Sink() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s File_read_Params) HasSink() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s File_read_Params) SetSink(v util.ByteStream) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// File_read_Params_List is a list of File_read_Params.
type File_read_Params_List struct{ capnp.List }

// NewFile_read_Params creates a new list of File_read_Params.
func NewFile_read_Params_List(s *capnp.Segment, sz int32) (File_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return File_read_Params_List{l}, err
}

func (s File_read_Params_List) At(i int) File_read_Params { return File_read_Params{s.List.Struct(i)} }

func (s File_read_Params_List) Set(i int, v File_read_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s File_read_Params_List) String() string {
	str, _ := text.MarshalList(0xfb1101f5d0d1edeb, s.List)
	return str
}

// File_read_Params_Promise is a wrapper for a File_read_Params promised by a client call.
type File_read_Params_Promise struct{ *capnp.Pipeline }

func (p File_read_Params_Promise) Struct() (File_read_Params, error) {
	s, err := p.Pipeline.Struct()
	return File_read_Params{s}, err
}

func (p File_read_Params_Promise) Sink() util.ByteStream {
	return util.ByteStream{Client: p.Pipeline.GetPipeline(0).Client()}
}

type File_read_Results struct{ capnp.Struct }

// File_read_Results_TypeID is the unique identifier for the type File_read_Results.
const File_read_Results_TypeID = 0xd6e8aca7864c2c0a

func NewFile_read_Results(s *capnp.Segment) (File_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return File_read_Results{st}, err
}

func NewRootFile_read_Results(s *capnp.Segment) (File_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return File_read_Results{st}, err
}

func ReadRootFile_read_Results(msg *capnp.Message) (File_read_Results, error) {
	root, err := msg.RootPtr()
	return File_read_Results{root.Struct()}, err
}

func (s File_read_Results) String() string {
	str, _ := text.Marshal(0xd6e8aca7864c2c0a, s.Struct)
	return str
}

// File_read_Results_List is a list of File_read_Results.
type File_read_Results_List struct{ capnp.List }

// NewFile_read_Results creates a new list of File_read_Results.
func NewFile_read_Results_List(s *capnp.Segment, sz int32) (File_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return File_read_Results_List{l}, err
}

func (s File_read_Results_List) At(i int) File_read_Results {
	return File_read_Results{s.List.Struct(i)}
}

func (s File_read_Results_List) Set(i int, v File_read_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s File_read_Results_List) String() string {
	str, _ := text.MarshalList(0xd6e8aca7864c2c0a, s.List)
	return str
}

// File_read_Results_Promise is a wrapper for a File_read_Results promised by a client call.
type File_read_Results_Promise struct{ *capnp.Pipeline }

func (p File_read_Results_Promise) Struct() (File_read_Results, error) {
	s, err := p.Pipeline.Struct()
	return File_read_Results{s}, err
}

type RwFile struct{ Client capnp.Client }

// RwFile_TypeID is the unique identifier for the type RwFile.
const RwFile_TypeID = 0xb4810121539f6e53

func (c RwFile) Write(ctx context.Context, params func(RwFile_write_Params) error, opts ...capnp.CallOption) RwFile_write_Results_Promise {
	if c.Client == nil {
		return RwFile_write_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "write",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(RwFile_write_Params{Struct: s}) }
	}
	return RwFile_write_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwFile) Truncate(ctx context.Context, params func(RwFile_truncate_Params) error, opts ...capnp.CallOption) RwFile_truncate_Results_Promise {
	if c.Client == nil {
		return RwFile_truncate_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "truncate",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(RwFile_truncate_Params{Struct: s}) }
	}
	return RwFile_truncate_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwFile) SetExec(ctx context.Context, params func(RwFile_setExec_Params) error, opts ...capnp.CallOption) RwFile_setExec_Results_Promise {
	if c.Client == nil {
		return RwFile_setExec_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "setExec",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(RwFile_setExec_Params{Struct: s}) }
	}
	return RwFile_setExec_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwFile) Read(ctx context.Context, params func(File_read_Params) error, opts ...capnp.CallOption) File_read_Results_Promise {
	if c.Client == nil {
		return File_read_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(File_read_Params{Struct: s}) }
	}
	return File_read_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c RwFile) Stat(ctx context.Context, params func(Node_stat_Params) error, opts ...capnp.CallOption) Node_stat_Results_Promise {
	if c.Client == nil {
		return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	return Node_stat_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type RwFile_Server interface {
	Write(RwFile_write) error

	Truncate(RwFile_truncate) error

	SetExec(RwFile_setExec) error

	Read(File_read) error

	Stat(Node_stat) error
}

func RwFile_ServerToClient(s RwFile_Server) RwFile {
	c, _ := s.(server.Closer)
	return RwFile{Client: server.New(RwFile_Methods(nil, s), c)}
}

func RwFile_Methods(methods []server.Method, s RwFile_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "write",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := RwFile_write{c, opts, RwFile_write_Params{Struct: p}, RwFile_write_Results{Struct: r}}
			return s.Write(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "truncate",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := RwFile_truncate{c, opts, RwFile_truncate_Params{Struct: p}, RwFile_truncate_Results{Struct: r}}
			return s.Truncate(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "setExec",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := RwFile_setExec{c, opts, RwFile_setExec_Params{Struct: p}, RwFile_setExec_Results{Struct: r}}
			return s.SetExec(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := File_read{c, opts, File_read_Params{Struct: p}, File_read_Results{Struct: r}}
			return s.Read(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Node_stat{c, opts, Node_stat_Params{Struct: p}, Node_stat_Results{Struct: r}}
			return s.Stat(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// RwFile_write holds the arguments for a server call to RwFile.write.
type RwFile_write struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  RwFile_write_Params
	Results RwFile_write_Results
}

// RwFile_truncate holds the arguments for a server call to RwFile.truncate.
type RwFile_truncate struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  RwFile_truncate_Params
	Results RwFile_truncate_Results
}

// RwFile_setExec holds the arguments for a server call to RwFile.setExec.
type RwFile_setExec struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  RwFile_setExec_Params
	Results RwFile_setExec_Results
}

type RwFile_write_Params struct{ capnp.Struct }

// RwFile_write_Params_TypeID is the unique identifier for the type RwFile_write_Params.
const RwFile_write_Params_TypeID = 0xec401fdf2c149f1b

func NewRwFile_write_Params(s *capnp.Segment) (RwFile_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_write_Params{st}, err
}

func NewRootRwFile_write_Params(s *capnp.Segment) (RwFile_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_write_Params{st}, err
}

func ReadRootRwFile_write_Params(msg *capnp.Message) (RwFile_write_Params, error) {
	root, err := msg.RootPtr()
	return RwFile_write_Params{root.Struct()}, err
}

func (s RwFile_write_Params) String() string {
	str, _ := text.Marshal(0xec401fdf2c149f1b, s.Struct)
	return str
}

func (s RwFile_write_Params) StartAt() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s RwFile_write_Params) SetStartAt(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// RwFile_write_Params_List is a list of RwFile_write_Params.
type RwFile_write_Params_List struct{ capnp.List }

// NewRwFile_write_Params creates a new list of RwFile_write_Params.
func NewRwFile_write_Params_List(s *capnp.Segment, sz int32) (RwFile_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RwFile_write_Params_List{l}, err
}

func (s RwFile_write_Params_List) At(i int) RwFile_write_Params {
	return RwFile_write_Params{s.List.Struct(i)}
}

func (s RwFile_write_Params_List) Set(i int, v RwFile_write_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_write_Params_List) String() string {
	str, _ := text.MarshalList(0xec401fdf2c149f1b, s.List)
	return str
}

// RwFile_write_Params_Promise is a wrapper for a RwFile_write_Params promised by a client call.
type RwFile_write_Params_Promise struct{ *capnp.Pipeline }

func (p RwFile_write_Params_Promise) Struct() (RwFile_write_Params, error) {
	s, err := p.Pipeline.Struct()
	return RwFile_write_Params{s}, err
}

type RwFile_write_Results struct{ capnp.Struct }

// RwFile_write_Results_TypeID is the unique identifier for the type RwFile_write_Results.
const RwFile_write_Results_TypeID = 0x83db8ff5946e5b09

func NewRwFile_write_Results(s *capnp.Segment) (RwFile_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwFile_write_Results{st}, err
}

func NewRootRwFile_write_Results(s *capnp.Segment) (RwFile_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwFile_write_Results{st}, err
}

func ReadRootRwFile_write_Results(msg *capnp.Message) (RwFile_write_Results, error) {
	root, err := msg.RootPtr()
	return RwFile_write_Results{root.Struct()}, err
}

func (s RwFile_write_Results) String() string {
	str, _ := text.Marshal(0x83db8ff5946e5b09, s.Struct)
	return str
}

func (s RwFile_write_Results) Sink() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s RwFile_write_Results) HasSink() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RwFile_write_Results) SetSink(v util.ByteStream) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RwFile_write_Results_List is a list of RwFile_write_Results.
type RwFile_write_Results_List struct{ capnp.List }

// NewRwFile_write_Results creates a new list of RwFile_write_Results.
func NewRwFile_write_Results_List(s *capnp.Segment, sz int32) (RwFile_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwFile_write_Results_List{l}, err
}

func (s RwFile_write_Results_List) At(i int) RwFile_write_Results {
	return RwFile_write_Results{s.List.Struct(i)}
}

func (s RwFile_write_Results_List) Set(i int, v RwFile_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_write_Results_List) String() string {
	str, _ := text.MarshalList(0x83db8ff5946e5b09, s.List)
	return str
}

// RwFile_write_Results_Promise is a wrapper for a RwFile_write_Results promised by a client call.
type RwFile_write_Results_Promise struct{ *capnp.Pipeline }

func (p RwFile_write_Results_Promise) Struct() (RwFile_write_Results, error) {
	s, err := p.Pipeline.Struct()
	return RwFile_write_Results{s}, err
}

func (p RwFile_write_Results_Promise) Sink() util.ByteStream {
	return util.ByteStream{Client: p.Pipeline.GetPipeline(0).Client()}
}

type RwFile_truncate_Params struct{ capnp.Struct }

// RwFile_truncate_Params_TypeID is the unique identifier for the type RwFile_truncate_Params.
const RwFile_truncate_Params_TypeID = 0xbf2ae4dc7cac598c

func NewRwFile_truncate_Params(s *capnp.Segment) (RwFile_truncate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_truncate_Params{st}, err
}

func NewRootRwFile_truncate_Params(s *capnp.Segment) (RwFile_truncate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_truncate_Params{st}, err
}

func ReadRootRwFile_truncate_Params(msg *capnp.Message) (RwFile_truncate_Params, error) {
	root, err := msg.RootPtr()
	return RwFile_truncate_Params{root.Struct()}, err
}

func (s RwFile_truncate_Params) String() string {
	str, _ := text.Marshal(0xbf2ae4dc7cac598c, s.Struct)
	return str
}

func (s RwFile_truncate_Params) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s RwFile_truncate_Params) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// RwFile_truncate_Params_List is a list of RwFile_truncate_Params.
type RwFile_truncate_Params_List struct{ capnp.List }

// NewRwFile_truncate_Params creates a new list of RwFile_truncate_Params.
func NewRwFile_truncate_Params_List(s *capnp.Segment, sz int32) (RwFile_truncate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RwFile_truncate_Params_List{l}, err
}

func (s RwFile_truncate_Params_List) At(i int) RwFile_truncate_Params {
	return RwFile_truncate_Params{s.List.Struct(i)}
}

func (s RwFile_truncate_Params_List) Set(i int, v RwFile_truncate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_truncate_Params_List) String() string {
	str, _ := text.MarshalList(0xbf2ae4dc7cac598c, s.List)
	return str
}

// RwFile_truncate_Params_Promise is a wrapper for a RwFile_truncate_Params promised by a client call.
type RwFile_truncate_Params_Promise struct{ *capnp.Pipeline }

func (p RwFile_truncate_Params_Promise) Struct() (RwFile_truncate_Params, error) {
	s, err := p.Pipeline.Struct()
	return RwFile_truncate_Params{s}, err
}

type RwFile_truncate_Results struct{ capnp.Struct }

// RwFile_truncate_Results_TypeID is the unique identifier for the type RwFile_truncate_Results.
const RwFile_truncate_Results_TypeID = 0xf101f68e2a8fff80

func NewRwFile_truncate_Results(s *capnp.Segment) (RwFile_truncate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_truncate_Results{st}, err
}

func NewRootRwFile_truncate_Results(s *capnp.Segment) (RwFile_truncate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_truncate_Results{st}, err
}

func ReadRootRwFile_truncate_Results(msg *capnp.Message) (RwFile_truncate_Results, error) {
	root, err := msg.RootPtr()
	return RwFile_truncate_Results{root.Struct()}, err
}

func (s RwFile_truncate_Results) String() string {
	str, _ := text.Marshal(0xf101f68e2a8fff80, s.Struct)
	return str
}

// RwFile_truncate_Results_List is a list of RwFile_truncate_Results.
type RwFile_truncate_Results_List struct{ capnp.List }

// NewRwFile_truncate_Results creates a new list of RwFile_truncate_Results.
func NewRwFile_truncate_Results_List(s *capnp.Segment, sz int32) (RwFile_truncate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RwFile_truncate_Results_List{l}, err
}

func (s RwFile_truncate_Results_List) At(i int) RwFile_truncate_Results {
	return RwFile_truncate_Results{s.List.Struct(i)}
}

func (s RwFile_truncate_Results_List) Set(i int, v RwFile_truncate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_truncate_Results_List) String() string {
	str, _ := text.MarshalList(0xf101f68e2a8fff80, s.List)
	return str
}

// RwFile_truncate_Results_Promise is a wrapper for a RwFile_truncate_Results promised by a client call.
type RwFile_truncate_Results_Promise struct{ *capnp.Pipeline }

func (p RwFile_truncate_Results_Promise) Struct() (RwFile_truncate_Results, error) {
	s, err := p.Pipeline.Struct()
	return RwFile_truncate_Results{s}, err
}

type RwFile_setExec_Params struct{ capnp.Struct }

// RwFile_setExec_Params_TypeID is the unique identifier for the type RwFile_setExec_Params.
const RwFile_setExec_Params_TypeID = 0xc799a0caf614d135

func NewRwFile_setExec_Params(s *capnp.Segment) (RwFile_setExec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_setExec_Params{st}, err
}

func NewRootRwFile_setExec_Params(s *capnp.Segment) (RwFile_setExec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_setExec_Params{st}, err
}

func ReadRootRwFile_setExec_Params(msg *capnp.Message) (RwFile_setExec_Params, error) {
	root, err := msg.RootPtr()
	return RwFile_setExec_Params{root.Struct()}, err
}

func (s RwFile_setExec_Params) String() string {
	str, _ := text.Marshal(0xc799a0caf614d135, s.Struct)
	return str
}

func (s RwFile_setExec_Params) Exec() bool {
	return s.Struct.Bit(0)
}

func (s RwFile_setExec_Params) SetExec(v bool) {
	s.Struct.SetBit(0, v)
}

// RwFile_setExec_Params_List is a list of RwFile_setExec_Params.
type RwFile_setExec_Params_List struct{ capnp.List }

// NewRwFile_setExec_Params creates a new list of RwFile_setExec_Params.
func NewRwFile_setExec_Params_List(s *capnp.Segment, sz int32) (RwFile_setExec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RwFile_setExec_Params_List{l}, err
}

func (s RwFile_setExec_Params_List) At(i int) RwFile_setExec_Params {
	return RwFile_setExec_Params{s.List.Struct(i)}
}

func (s RwFile_setExec_Params_List) Set(i int, v RwFile_setExec_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_setExec_Params_List) String() string {
	str, _ := text.MarshalList(0xc799a0caf614d135, s.List)
	return str
}

// RwFile_setExec_Params_Promise is a wrapper for a RwFile_setExec_Params promised by a client call.
type RwFile_setExec_Params_Promise struct{ *capnp.Pipeline }

func (p RwFile_setExec_Params_Promise) Struct() (RwFile_setExec_Params, error) {
	s, err := p.Pipeline.Struct()
	return RwFile_setExec_Params{s}, err
}

type RwFile_setExec_Results struct{ capnp.Struct }

// RwFile_setExec_Results_TypeID is the unique identifier for the type RwFile_setExec_Results.
const RwFile_setExec_Results_TypeID = 0xddad3e0282b03294

func NewRwFile_setExec_Results(s *capnp.Segment) (RwFile_setExec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_setExec_Results{st}, err
}

func NewRootRwFile_setExec_Results(s *capnp.Segment) (RwFile_setExec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_setExec_Results{st}, err
}

func ReadRootRwFile_setExec_Results(msg *capnp.Message) (RwFile_setExec_Results, error) {
	root, err := msg.RootPtr()
	return RwFile_setExec_Results{root.Struct()}, err
}

func (s RwFile_setExec_Results) String() string {
	str, _ := text.Marshal(0xddad3e0282b03294, s.Struct)
	return str
}

// RwFile_setExec_Results_List is a list of RwFile_setExec_Results.
type RwFile_setExec_Results_List struct{ capnp.List }

// NewRwFile_setExec_Results creates a new list of RwFile_setExec_Results.
func NewRwFile_setExec_Results_List(s *capnp.Segment, sz int32) (RwFile_setExec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RwFile_setExec_Results_List{l}, err
}

func (s RwFile_setExec_Results_List) At(i int) RwFile_setExec_Results {
	return RwFile_setExec_Results{s.List.Struct(i)}
}

func (s RwFile_setExec_Results_List) Set(i int, v RwFile_setExec_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_setExec_Results_List) String() string {
	str, _ := text.MarshalList(0xddad3e0282b03294, s.List)
	return str
}

// RwFile_setExec_Results_Promise is a wrapper for a RwFile_setExec_Results promised by a client call.
type RwFile_setExec_Results_Promise struct{ *capnp.Pipeline }

func (p RwFile_setExec_Results_Promise) Struct() (RwFile_setExec_Results, error) {
	s, err := p.Pipeline.Struct()
	return RwFile_setExec_Results{s}, err
}

const schema_e91f231103c0780e = "x\xda\x9cWkl\x1cW\x15>gf\xb7\xbbc\xcf" +
	"f};\x8e\x9b\xc4DV\x8a-%&\xb1b\x87B" +
	"cQ\xbc11i\xd2\x80<q\x00%\x11*c\xef" +
	"\x84\xae\xbc\x0f{f6\xeb-mM\x1c\x8a\x13\x09\x88" +
	"*\xb5H\x09\x12\x85\x88\x87T\xa5\xa2\x94\x96\xa8\x82\x94" +
	"\xd4R\x14R\xfaJE\x11iAi\xd4\x0a\x08%\xa1" +
	"\x14\x12\xd1G:\xe8\xdc\xf1\x9d\x99\xac\xc7v\xcc\xbf\xd5" +
	"\xdc{\xbf\xf3\xfa\xcew\xce\xaem\x88g\xa4\xce\xf8d" +
	"\x03\x80~\"~\x83\xfb\x8e\xddv\xb4xt`\x1f\xb0" +
	"f\x04\x88c\x02`\xdd\xaad/\x02j\x9d\xc9\x1e@" +
	"W\xd9U|\xf0\xf2\xc1\xd7\xf6\x01[\xe2_\xd0\x93]" +
	"ta\x07\xbf\xd0\xf5\xdca\xeb\xbe\xfc\x93\xfb\x81\xad\x90" +
	"\xdd\x83\x87/=\xf1\xb5\xc9\xfb^\x00\xc0u\xd5d/" +
	"j\x07\x92\x09\x00\xed\xfe\xe4\xa4\xf6\x0a\xfd:g<\x86" +
	"\xcb\xc6\xb6?\xc4\x98\xec.\x1a;!\xb3\x8f\xb6\\\x00" +
	"@\xedx\xf2q\xed$\xbf\xfaLr\x93v\x81~\xb9" +
	"O\x7f\xb2\xed'\xea\xc7\x9a\xbe\x07\xac\xc9\xb7|&\xb9" +
	"\x8c,\x9f\xe5\x96\x8f\xdf\xb1\xff+\xb7i\xbb\x1e\x81Z" +
	"\xb4w\x93\x8fk\xa8\x10\xda\xd5\xe4&\xadM\xb9\x09\xc0" +
	"\xbdT\x99\xf8\xf1\x8e\x03\xc3?\x0f\x07\xbaX\xe9&\xb4" +
	"\xe5\x0a\xa1\x0d\x14\x1f\x1eX\x81{\x9f\x98\x81v\x9b2" +
	"\xa5\xf5q\xb4\x0d\xca)\xed8G{/\xf6_\xf3#" +
	"wT\x8e\x01[\xee\xa3=\xaa\xec$\xb4\xa78\xda\xef" +
	"~\xd8\xf7\xfa\xbf\xad\xab\xbf\x02\xb6\x12\x01bt~V" +
	"y\x04!\xe6\xfe\xfe\xad\xe6\x8d\xb7\xfc\xd5|:tr" +
	"Z9B'\xdf\xdaq\xf4\x9e?\xbd\xd9\xfe\x1b\xd0\x97" +
	"\xa08zJ\xe1\xb5x\x86\x83\xbesh\xe4\xee\xdf\xe6" +
	"o\x9c\xf2b\xe0\xe7\xe7\xe9<\xe6\xfe\xb2n|\xcf\xe8" +
	"K\xd9\xa9\xb0?\xa7\x95m\xf4\xf4\x15\xfe\xd4\x9aZ{" +
	"\xe9\xdb\xcf\xdey\x12\xf4e(\xb9\x13'\xf6\xbc91" +
	"\xb5\xf9\x14,\xc6\x04\x02h\x97\x95\xf7(m\xfc\xa6\x7f" +
	"\xa63\x94\x82D\xf4aB\x06\xd0\x96\xd6\xbd\xac\xb5\xd5" +
	"\x11\xfc\x8a\xba\x16\x04to9\xd3x\xe5\xd9\x1f\x1c:" +
	"\x15v\x1a\xeby^\x95z\xc2{ [\xfa\xe2?\xab" +
	"WO_\xc30\xefB'\xbf\xb0\xf1\xf9}\xddo\x97" +
	"_{.\xec\xbb^?H\x17\xbe\xcc/|\xf0zu" +
	"\xd3\xf6\xf5k_\x98Q\x99{\xeb_\xd5\x0e\xd4\xdf\x04" +
	"\xa0=P?\xa9\x9d\xa7_\x01\x03Ys\xe8e\\\xe2" +
	"\xec\xa9\xafC\xef\x9av\xa1\xbeB5\xff\xcf\xe4\xfb?" +
	"\xfa\xb5\xfcb\xd8t\x9f\xca\xcb\xa8\xabd\xban\xf5\xd6" +
	"o\xfe\xf4\xe8\xdf\xfe\xe0q\x90\x077\xaa.\xa3\x8c\x1f" +
	"i\xfeLa\xff\xd8\xe2W#\x13\xban\x87z#\x81" +
	"\x18\x1c\xe4\xc1\xae\xc7&\xa4O?\xfag\xaf\x858\xc8" +
	"^\x95\x97\xed\x83s'/\x7fb\xe5\x87\xe7fD\x96" +
	"S\xff\xae\x95U\xe2\xdc\xa8zJ\xbb\xa0Rd\xcd\x0f" +
	"7\xae>\xd7\x92\xf9G8\xd3g\xd5v\xb2s\x9e\xdb" +
	"\x19<6\xda4p\xf8\xe6\x8b\xa07\x05\xa5HqG" +
	"\x94\x14]\xa8|jp\xe7\x9ec\x7f\xbc\x08\xfar\xf4" +
	"\xe3]\x93\xe2\xf1\xaeOQB\xbe\xee\x1el\xff\xce\x15" +
	"\xfcW\xc8\xd5C\xa9-\xe4\xea\xed\x83\x13\xfb\xbf[j" +
	"\xba\xe2\xd1\xd6{z\x7f\xea\x08=}\x88\x83\xb7\xfd\xe2" +
	"\xd8\xc8\xae\xfc\x86wC\xbc>\x99\xe2\x8c\x7f\xeb\xe2\x99" +
	"\x97.#{\x9f\xfc\x92\xc4\xdb'=\xc7\x8e\xa7~\x06" +
	"\xe8\xbe\xfd\xf2\xe4\xca\xbf\xbc\x91r\xbd:\xf0\xb7_X" +
	"4\x88\xf0}ww.o\xdaU\xdb\x89\x99\x85\x8e!" +
	"c\xa48\xd2\xbd1g\x99CN\xc9\xaavT\x8c\xfc" +
	"p\xeb6\xd3.\xe7\x1d\x1b\xf4\x98\x1c\x03\x88!\x00K" +
	"\xb5\x03\xe8I\x19\xf5F\x09\xd3\xc5R\xd6D&t\x07" +
	"\x10\x19\xa0\x8f*\xfb\xa8\xdb*\x9f\xcd\xe5\xcd\x8e\x8a\x95" +
	"s\xcc\xd6mf\x0b\x07\x9d\x0d\xd3\xce\x15\x87\x91\xb9w" +
	"\xbe\xf1\xe2\xaa\xca\xad_z\x1ejP\xa3|\xed+:" +
	"V\xb5c\xc0\xb1L\xa3\x00\xfd\x88zR\x8e\x03\xf8Y" +
	"E\xa1\x17\xac\xb3\x1d$\xd6\x96@\xf4\x85\x02Ef\xd9" +
	"R:K%\xd2#e\xfb\xae\x0c\xa6\xb3\xa5\xa2\x99\xc1" +
	"~\x0c,\xa3\xb0\xdc\xd2\xfd\xf9R\xd6$;1nG" +
	"P\x03\x85\xa82FX\xf1D\xdav\x0c\xe7Z\x90 " +
	")\x84\xd1A\x17\xbc,\xcb\xb3g$W\xdc]\xc2\x86" +
	"\xa0\x0d\x00\xb1\x01\"\xfd\xa24\x07~\x09j\xa0h4" +
	"\xdf/\xcb4\xb2\x19\xd4c\x88~\xed \xc2\xc5\x1a6" +
	"\xf4\xf4\x1b\x96Q\x98\xd5\xcd\xa2Q0Q\x05\x09\xd5\x90" +
	"sR\x0d\x09xyT\xee\x9eh9\x14S\x90\xe9]" +
	" \xb1>*\x8fPk\x14=\xc3\xd6o\x01\x89u&" +
	"P\xf2E\x11E\xeb\xb3\xb6^\x90\xd8\xd2D\x0b'X" +
	"\x06]\xc7*\x17\x87\x0c\xc7\x04\x80\x0c\x8e\xdb\xa6\xd37" +
	"f\x0ey\xf1\x06s-\x14q,\xe4d\x10sa8" +
	"\x9b\xb3\"\x8bss\x10u\"\x9b\xb3\x90\x05ZS\xc3" +
	"\xd6\xf8<l\xed \xb6\x91\x8d4\xb5\xc4\xf5?#v" +
	"\xb6\xf6\x1bV\xc2(\xd8\x91a\xf0\x86\x13yh\xf5\x0a" +
	"\x07\xb3\xb7\xdc\xdd&* \xa1\x12r]\x89\xf0!\x9f" +
	"\xb3\x1d_\x14\xc4\xc59\x92\xc7\xed\xe2\xff\xcb\x98\x01\xc7" +
	"p6\x17w\xf7\x94:\xe8\x8c@\x1a\xb0\x11\xa3\xbd\x8f" +
	"\x83\x84\xf1\xb9P\xb0D\xcck\x94c\xaa\xebrO\xee" +
	"\xa5*\x8e\xc9\xa8\x7fC\xc2\x14~\xe8bh\x8e\xb3\xbd" +
	"\xd4(rC#I*\xcb\xed\x04\xd0\xef\x92Qw$" +
	"d1\xd6\x882\x00\x1b\xdd\x02\xa0\x8f\xc8\xa8\xdf#a" +
	"J\xbaJ\xcf\xfd\xa9\xc5\xaa\xbd \x113\xe0\x8649" +
	"\xe4\x9ac\xe6P\xd91\x06A\xce\x9b\x88 !\x0dw" +
	"b\xab1\x98'\x96\x8ao\xe3v\xb5\x90\xcf\x15\x87g" +
	"\xd7\xd0i2\xcf\xd7\x8bd\xd074Wc\xf3\x8aF" +
	"\x80u\x07`=6\xe7\x1c\xb2`\x1b\x9dU\x93\xc3\x14" +
	"\x18\xb2L\x83\xeb\xbd]N\xcc\xa1\xf7\x04\x82,\xd8\x10" +
	"k\xb0\xa5Z\xa7e\xab\xca\x1b9\xd8E\xb0\xab\x857" +
	"\xc7\xb4\xec\x8b\x9d\x08\xc5F\x17\x92}\xb1\xa8\xa2X\xcd" +
	"}\xd9\xa7Dd0MB\xb7 e\xe4\x96\x01\xb8K" +
	"\xc1\xb6\x8e\xdd=^\xa7\xeaI?\xeaU\x14u\xab\x8c" +
	"\xfaZ\x09\x19N3y\x0d}\\)\xa3\xfe\xf1\x9a~" +
	"\x98O\xf5\xa3s\x9e5\xf3\xe6t\xbf\xcb\x0bT\xea " +
	"8N4\x1a\x11\xbe\xf8E\\\x9an\xabR\x87GY" +
	"\x1c\xf6\x8c5b\xac\x96>\x8ea}\xd5tf\xd8K" +
	"\xccF\xed\xf9\xf4%M\x91\x06cD\xec](V]" +
	"\xa6w\x8b1\"6w\x14\x7f)\xd8z\x1a1kh" +
	"\x8c\x88\xf5\x14\xc5~\xc4V\xd0\xbb\xc5\x89\x1e\x8f\xb8\x19" +
	"l\xe1\"\x96\xc1\x1e/\xab\xd3\x03\xc4_{#\x89q" +
	"\xcd\xaa\xd3o\xa4k\xfb\xaa7H\xcc\xb8\xed\x18\x96\xb3" +
	"\xc1\x99\xa1]Q;B\x8d\x92\"\xb2\xd4 \x80\xae\xca" +
	"\xa8/\x91\xd0\xdd]\xca\xe7K\x95\xad9H\x14\x87m" +
	"j\xfc\xf85\x9d?g\x83\x0a\xb2D3\xd5'*\x89" +
	"\xe0j\x19\xf5[k\x09\x14)n\xf3\xcf$QfX" +
	"\xe0\xb0\x9c\x9ezQIm\x95p\xdc,:V\xce\xb4" +
	"q\x11`\xbf\x8c\xd8\x10\xfe\xd7L\x1f\x178cg\x8c" +
	"\xe6\xa86\x11\xc5Q}\x97\xfa\xc8\xa5\x8c\x8c\xfa\xd6P" +
	"\xafo\xa6\xae\xd8(\xa3\xde/!J\xdel\xf9\x1c\xa5" +
	"\xfav\x19\xf5\xed3\x09\xd1c\x14J\xe5\xa2#&\xf3" +
	"\xf5o\xc6\x11\x8a T\xf8\x7f\x01\x00\x00\xff\xff\xbe\xc7" +
	"\xbe\xbb"

func init() {
	schemas.Register(schema_e91f231103c0780e,
		0x8353ac6eac2573f2,
		0x83db8ff5946e5b09,
		0x88b56c7e729acc32,
		0x955400781a01b061,
		0x9b162b0ca62537be,
		0xaa5b133d60884bbd,
		0xb16b8959a58277ee,
		0xb4810121539f6e53,
		0xb7774b1c65f804fa,
		0xbbfd72f3e045a1cb,
		0xbe65e735441bebd4,
		0xbf2ae4dc7cac598c,
		0xc2126cc87a7099f2,
		0xc264d071767f0ab6,
		0xc55fca8dee30c272,
		0xc749c282e476c082,
		0xc799a0caf614d135,
		0xc9fd79ef566f6491,
		0xccdb75f03a83cd44,
		0xce3039544779e0fc,
		0xce7e877bb4ee9a8f,
		0xcf03bca4fb87f453,
		0xd6e8aca7864c2c0a,
		0xda1578886d431ba2,
		0xddad3e0282b03294,
		0xdffe2836f5c5dffc,
		0xec401fdf2c149f1b,
		0xed229a531671b762,
		0xedd8b7765a623c77,
		0xf101f68e2a8fff80,
		0xf6166f9688826248,
		0xf9416c5b70b7b325,
		0xfb1101f5d0d1edeb,
		0xff0de3e62887d2f0)
}
