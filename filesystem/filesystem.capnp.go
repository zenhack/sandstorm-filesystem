// Code generated by capnpc-go. DO NOT EDIT.

package filesystem

import (
	context "context"
	strconv "strconv"
	util "zenhack.net/go/sandstorm/capnp/util"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Node struct{ Client *capnp.Client }

// Node_TypeID is the unique identifier for the type Node.
const Node_TypeID = 0x955400781a01b061

func (c Node) Stat(ctx context.Context, params func(Node_stat_Params) error) (Node_stat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Node_stat_Results_Future{Future: ans.Future()}, release
}

// A Node_Server is a Node with a local implementation.
type Node_Server interface {
	Stat(context.Context, Node_stat) error
}

// Node_NewServer creates a new Server from an implementation of Node_Server.
func Node_NewServer(s Node_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Node_Methods(nil, s), s, c, policy)
}

// Node_ServerToClient creates a new Client from an implementation of Node_Server.
// The caller is responsible for calling Release on the returned Client.
func Node_ServerToClient(s Node_Server, policy *server.Policy) Node {
	return Node{Client: capnp.NewClient(Node_NewServer(s, policy))}
}

// Node_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Node_Methods(methods []server.Method, s Node_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stat(ctx, Node_stat{call})
		},
	})

	return methods
}

// Node_stat holds the state for a server call to Node.stat.
// See server.Call for documentation.
type Node_stat struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Node_stat) Args() Node_stat_Params {
	return Node_stat_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Node_stat) AllocResults() (Node_stat_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Node_stat_Results{Struct: r}, err
}

type Node_stat_Params struct{ capnp.Struct }

// Node_stat_Params_TypeID is the unique identifier for the type Node_stat_Params.
const Node_stat_Params_TypeID = 0xed229a531671b762

func NewNode_stat_Params(s *capnp.Segment) (Node_stat_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Node_stat_Params{st}, err
}

func NewRootNode_stat_Params(s *capnp.Segment) (Node_stat_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Node_stat_Params{st}, err
}

func ReadRootNode_stat_Params(msg *capnp.Message) (Node_stat_Params, error) {
	root, err := msg.Root()
	return Node_stat_Params{root.Struct()}, err
}

func (s Node_stat_Params) String() string {
	str, _ := text.Marshal(0xed229a531671b762, s.Struct)
	return str
}

// Node_stat_Params_List is a list of Node_stat_Params.
type Node_stat_Params_List struct{ capnp.List }

// NewNode_stat_Params creates a new list of Node_stat_Params.
func NewNode_stat_Params_List(s *capnp.Segment, sz int32) (Node_stat_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Node_stat_Params_List{l}, err
}

func (s Node_stat_Params_List) At(i int) Node_stat_Params { return Node_stat_Params{s.List.Struct(i)} }

func (s Node_stat_Params_List) Set(i int, v Node_stat_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Node_stat_Params_List) String() string {
	str, _ := text.MarshalList(0xed229a531671b762, s.List)
	return str
}

// Node_stat_Params_Future is a wrapper for a Node_stat_Params promised by a client call.
type Node_stat_Params_Future struct{ *capnp.Future }

func (p Node_stat_Params_Future) Struct() (Node_stat_Params, error) {
	s, err := p.Future.Struct()
	return Node_stat_Params{s}, err
}

type Node_stat_Results struct{ capnp.Struct }

// Node_stat_Results_TypeID is the unique identifier for the type Node_stat_Results.
const Node_stat_Results_TypeID = 0x9b162b0ca62537be

func NewNode_stat_Results(s *capnp.Segment) (Node_stat_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Node_stat_Results{st}, err
}

func NewRootNode_stat_Results(s *capnp.Segment) (Node_stat_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Node_stat_Results{st}, err
}

func ReadRootNode_stat_Results(msg *capnp.Message) (Node_stat_Results, error) {
	root, err := msg.Root()
	return Node_stat_Results{root.Struct()}, err
}

func (s Node_stat_Results) String() string {
	str, _ := text.Marshal(0x9b162b0ca62537be, s.Struct)
	return str
}

func (s Node_stat_Results) Info() (StatInfo, error) {
	p, err := s.Struct.Ptr(0)
	return StatInfo{Struct: p.Struct()}, err
}

func (s Node_stat_Results) HasInfo() bool {
	return s.Struct.HasPtr(0)
}

func (s Node_stat_Results) SetInfo(v StatInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s Node_stat_Results) NewInfo() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Node_stat_Results_List is a list of Node_stat_Results.
type Node_stat_Results_List struct{ capnp.List }

// NewNode_stat_Results creates a new list of Node_stat_Results.
func NewNode_stat_Results_List(s *capnp.Segment, sz int32) (Node_stat_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Node_stat_Results_List{l}, err
}

func (s Node_stat_Results_List) At(i int) Node_stat_Results {
	return Node_stat_Results{s.List.Struct(i)}
}

func (s Node_stat_Results_List) Set(i int, v Node_stat_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Node_stat_Results_List) String() string {
	str, _ := text.MarshalList(0x9b162b0ca62537be, s.List)
	return str
}

// Node_stat_Results_Future is a wrapper for a Node_stat_Results promised by a client call.
type Node_stat_Results_Future struct{ *capnp.Future }

func (p Node_stat_Results_Future) Struct() (Node_stat_Results, error) {
	s, err := p.Future.Struct()
	return Node_stat_Results{s}, err
}

func (p Node_stat_Results_Future) Info() StatInfo_Future {
	return StatInfo_Future{Future: p.Future.Field(0, nil)}
}

type StatInfo struct{ capnp.Struct }
type StatInfo_file StatInfo
type StatInfo_Which uint16

const (
	StatInfo_Which_dir  StatInfo_Which = 0
	StatInfo_Which_file StatInfo_Which = 1
)

func (w StatInfo_Which) String() string {
	const s = "dirfile"
	switch w {
	case StatInfo_Which_dir:
		return s[0:3]
	case StatInfo_Which_file:
		return s[3:7]

	}
	return "StatInfo_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// StatInfo_TypeID is the unique identifier for the type StatInfo.
const StatInfo_TypeID = 0xc749c282e476c082

func NewStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StatInfo{st}, err
}

func NewRootStatInfo(s *capnp.Segment) (StatInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return StatInfo{st}, err
}

func ReadRootStatInfo(msg *capnp.Message) (StatInfo, error) {
	root, err := msg.Root()
	return StatInfo{root.Struct()}, err
}

func (s StatInfo) String() string {
	str, _ := text.Marshal(0xc749c282e476c082, s.Struct)
	return str
}

func (s StatInfo) Which() StatInfo_Which {
	return StatInfo_Which(s.Struct.Uint16(0))
}
func (s StatInfo) SetDir() {
	s.Struct.SetUint16(0, 0)

}

func (s StatInfo) File() StatInfo_file { return StatInfo_file(s) }

func (s StatInfo) SetFile() {
	s.Struct.SetUint16(0, 1)
}

func (s StatInfo_file) Size() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s StatInfo_file) SetSize(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s StatInfo) Executable() bool {
	return s.Struct.Bit(16)
}

func (s StatInfo) SetExecutable(v bool) {
	s.Struct.SetBit(16, v)
}

func (s StatInfo) Writable() bool {
	return s.Struct.Bit(17)
}

func (s StatInfo) SetWritable(v bool) {
	s.Struct.SetBit(17, v)
}

// StatInfo_List is a list of StatInfo.
type StatInfo_List struct{ capnp.List }

// NewStatInfo creates a new list of StatInfo.
func NewStatInfo_List(s *capnp.Segment, sz int32) (StatInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return StatInfo_List{l}, err
}

func (s StatInfo_List) At(i int) StatInfo { return StatInfo{s.List.Struct(i)} }

func (s StatInfo_List) Set(i int, v StatInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s StatInfo_List) String() string {
	str, _ := text.MarshalList(0xc749c282e476c082, s.List)
	return str
}

// StatInfo_Future is a wrapper for a StatInfo promised by a client call.
type StatInfo_Future struct{ *capnp.Future }

func (p StatInfo_Future) Struct() (StatInfo, error) {
	s, err := p.Future.Struct()
	return StatInfo{s}, err
}

func (p StatInfo_Future) File() StatInfo_file_Future { return StatInfo_file_Future{p.Future} }

// StatInfo_file_Future is a wrapper for a StatInfo_file promised by a client call.
type StatInfo_file_Future struct{ *capnp.Future }

func (p StatInfo_file_Future) Struct() (StatInfo_file, error) {
	s, err := p.Future.Struct()
	return StatInfo_file{s}, err
}

type Directory struct{ Client *capnp.Client }

// Directory_TypeID is the unique identifier for the type Directory.
const Directory_TypeID = 0xce3039544779e0fc

func (c Directory) List(ctx context.Context, params func(Directory_list_Params) error) (Directory_list_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Directory_list_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Directory_list_Results_Future{Future: ans.Future()}, release
}
func (c Directory) Walk(ctx context.Context, params func(Directory_walk_Params) error) (Directory_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Directory_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Directory_walk_Results_Future{Future: ans.Future()}, release
}
func (c Directory) Stat(ctx context.Context, params func(Node_stat_Params) error) (Node_stat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Node_stat_Results_Future{Future: ans.Future()}, release
}

// A Directory_Server is a Directory with a local implementation.
type Directory_Server interface {
	List(context.Context, Directory_list) error

	Walk(context.Context, Directory_walk) error

	Stat(context.Context, Node_stat) error
}

// Directory_NewServer creates a new Server from an implementation of Directory_Server.
func Directory_NewServer(s Directory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Directory_Methods(nil, s), s, c, policy)
}

// Directory_ServerToClient creates a new Client from an implementation of Directory_Server.
// The caller is responsible for calling Release on the returned Client.
func Directory_ServerToClient(s Directory_Server, policy *server.Policy) Directory {
	return Directory{Client: capnp.NewClient(Directory_NewServer(s, policy))}
}

// Directory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Directory_Methods(methods []server.Method, s Directory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, Directory_list{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Directory_walk{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stat(ctx, Node_stat{call})
		},
	})

	return methods
}

// Directory_list holds the state for a server call to Directory.list.
// See server.Call for documentation.
type Directory_list struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Directory_list) Args() Directory_list_Params {
	return Directory_list_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Directory_list) AllocResults() (Directory_list_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_list_Results{Struct: r}, err
}

// Directory_walk holds the state for a server call to Directory.walk.
// See server.Call for documentation.
type Directory_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Directory_walk) Args() Directory_walk_Params {
	return Directory_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Directory_walk) AllocResults() (Directory_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Results{Struct: r}, err
}

type Directory_Entry struct{ capnp.Struct }

// Directory_Entry_TypeID is the unique identifier for the type Directory_Entry.
const Directory_Entry_TypeID = 0xce7e877bb4ee9a8f

func NewDirectory_Entry(s *capnp.Segment) (Directory_Entry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Directory_Entry{st}, err
}

func NewRootDirectory_Entry(s *capnp.Segment) (Directory_Entry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Directory_Entry{st}, err
}

func ReadRootDirectory_Entry(msg *capnp.Message) (Directory_Entry, error) {
	root, err := msg.Root()
	return Directory_Entry{root.Struct()}, err
}

func (s Directory_Entry) String() string {
	str, _ := text.Marshal(0xce7e877bb4ee9a8f, s.Struct)
	return str
}

func (s Directory_Entry) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Directory_Entry) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Directory_Entry) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Directory_Entry) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Directory_Entry) Info() (StatInfo, error) {
	p, err := s.Struct.Ptr(1)
	return StatInfo{Struct: p.Struct()}, err
}

func (s Directory_Entry) HasInfo() bool {
	return s.Struct.HasPtr(1)
}

func (s Directory_Entry) SetInfo(v StatInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewInfo sets the info field to a newly
// allocated StatInfo struct, preferring placement in s's segment.
func (s Directory_Entry) NewInfo() (StatInfo, error) {
	ss, err := NewStatInfo(s.Struct.Segment())
	if err != nil {
		return StatInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// Directory_Entry_List is a list of Directory_Entry.
type Directory_Entry_List struct{ capnp.List }

// NewDirectory_Entry creates a new list of Directory_Entry.
func NewDirectory_Entry_List(s *capnp.Segment, sz int32) (Directory_Entry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return Directory_Entry_List{l}, err
}

func (s Directory_Entry_List) At(i int) Directory_Entry { return Directory_Entry{s.List.Struct(i)} }

func (s Directory_Entry_List) Set(i int, v Directory_Entry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_List) String() string {
	str, _ := text.MarshalList(0xce7e877bb4ee9a8f, s.List)
	return str
}

// Directory_Entry_Future is a wrapper for a Directory_Entry promised by a client call.
type Directory_Entry_Future struct{ *capnp.Future }

func (p Directory_Entry_Future) Struct() (Directory_Entry, error) {
	s, err := p.Future.Struct()
	return Directory_Entry{s}, err
}

func (p Directory_Entry_Future) Info() StatInfo_Future {
	return StatInfo_Future{Future: p.Future.Field(1, nil)}
}

type Directory_Entry_Stream struct{ Client *capnp.Client }

// Directory_Entry_Stream_TypeID is the unique identifier for the type Directory_Entry_Stream.
const Directory_Entry_Stream_TypeID = 0x88b56c7e729acc32

func (c Directory_Entry_Stream) Push(ctx context.Context, params func(Directory_Entry_Stream_push_Params) error) (Directory_Entry_Stream_push_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "push",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Directory_Entry_Stream_push_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Directory_Entry_Stream_push_Results_Future{Future: ans.Future()}, release
}
func (c Directory_Entry_Stream) Done(ctx context.Context, params func(Directory_Entry_Stream_done_Params) error) (Directory_Entry_Stream_done_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Directory_Entry_Stream_done_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Directory_Entry_Stream_done_Results_Future{Future: ans.Future()}, release
}

// A Directory_Entry_Stream_Server is a Directory_Entry_Stream with a local implementation.
type Directory_Entry_Stream_Server interface {
	Push(context.Context, Directory_Entry_Stream_push) error

	Done(context.Context, Directory_Entry_Stream_done) error
}

// Directory_Entry_Stream_NewServer creates a new Server from an implementation of Directory_Entry_Stream_Server.
func Directory_Entry_Stream_NewServer(s Directory_Entry_Stream_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Directory_Entry_Stream_Methods(nil, s), s, c, policy)
}

// Directory_Entry_Stream_ServerToClient creates a new Client from an implementation of Directory_Entry_Stream_Server.
// The caller is responsible for calling Release on the returned Client.
func Directory_Entry_Stream_ServerToClient(s Directory_Entry_Stream_Server, policy *server.Policy) Directory_Entry_Stream {
	return Directory_Entry_Stream{Client: capnp.NewClient(Directory_Entry_Stream_NewServer(s, policy))}
}

// Directory_Entry_Stream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Directory_Entry_Stream_Methods(methods []server.Method, s Directory_Entry_Stream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "push",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Push(ctx, Directory_Entry_Stream_push{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x88b56c7e729acc32,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory.Entry.Stream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, Directory_Entry_Stream_done{call})
		},
	})

	return methods
}

// Directory_Entry_Stream_push holds the state for a server call to Directory_Entry_Stream.push.
// See server.Call for documentation.
type Directory_Entry_Stream_push struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Directory_Entry_Stream_push) Args() Directory_Entry_Stream_push_Params {
	return Directory_Entry_Stream_push_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Directory_Entry_Stream_push) AllocResults() (Directory_Entry_Stream_push_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_push_Results{Struct: r}, err
}

// Directory_Entry_Stream_done holds the state for a server call to Directory_Entry_Stream.done.
// See server.Call for documentation.
type Directory_Entry_Stream_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Directory_Entry_Stream_done) Args() Directory_Entry_Stream_done_Params {
	return Directory_Entry_Stream_done_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Directory_Entry_Stream_done) AllocResults() (Directory_Entry_Stream_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Results{Struct: r}, err
}

type Directory_Entry_Stream_push_Params struct{ capnp.Struct }

// Directory_Entry_Stream_push_Params_TypeID is the unique identifier for the type Directory_Entry_Stream_push_Params.
const Directory_Entry_Stream_push_Params_TypeID = 0xf6166f9688826248

func NewDirectory_Entry_Stream_push_Params(s *capnp.Segment) (Directory_Entry_Stream_push_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_Entry_Stream_push_Params{st}, err
}

func NewRootDirectory_Entry_Stream_push_Params(s *capnp.Segment) (Directory_Entry_Stream_push_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_Entry_Stream_push_Params{st}, err
}

func ReadRootDirectory_Entry_Stream_push_Params(msg *capnp.Message) (Directory_Entry_Stream_push_Params, error) {
	root, err := msg.Root()
	return Directory_Entry_Stream_push_Params{root.Struct()}, err
}

func (s Directory_Entry_Stream_push_Params) String() string {
	str, _ := text.Marshal(0xf6166f9688826248, s.Struct)
	return str
}

func (s Directory_Entry_Stream_push_Params) Entries() (Directory_Entry_List, error) {
	p, err := s.Struct.Ptr(0)
	return Directory_Entry_List{List: p.List()}, err
}

func (s Directory_Entry_Stream_push_Params) HasEntries() bool {
	return s.Struct.HasPtr(0)
}

func (s Directory_Entry_Stream_push_Params) SetEntries(v Directory_Entry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated Directory_Entry_List, preferring placement in s's segment.
func (s Directory_Entry_Stream_push_Params) NewEntries(n int32) (Directory_Entry_List, error) {
	l, err := NewDirectory_Entry_List(s.Struct.Segment(), n)
	if err != nil {
		return Directory_Entry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Directory_Entry_Stream_push_Params_List is a list of Directory_Entry_Stream_push_Params.
type Directory_Entry_Stream_push_Params_List struct{ capnp.List }

// NewDirectory_Entry_Stream_push_Params creates a new list of Directory_Entry_Stream_push_Params.
func NewDirectory_Entry_Stream_push_Params_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_push_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_Entry_Stream_push_Params_List{l}, err
}

func (s Directory_Entry_Stream_push_Params_List) At(i int) Directory_Entry_Stream_push_Params {
	return Directory_Entry_Stream_push_Params{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_push_Params_List) Set(i int, v Directory_Entry_Stream_push_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_push_Params_List) String() string {
	str, _ := text.MarshalList(0xf6166f9688826248, s.List)
	return str
}

// Directory_Entry_Stream_push_Params_Future is a wrapper for a Directory_Entry_Stream_push_Params promised by a client call.
type Directory_Entry_Stream_push_Params_Future struct{ *capnp.Future }

func (p Directory_Entry_Stream_push_Params_Future) Struct() (Directory_Entry_Stream_push_Params, error) {
	s, err := p.Future.Struct()
	return Directory_Entry_Stream_push_Params{s}, err
}

type Directory_Entry_Stream_push_Results struct{ capnp.Struct }

// Directory_Entry_Stream_push_Results_TypeID is the unique identifier for the type Directory_Entry_Stream_push_Results.
const Directory_Entry_Stream_push_Results_TypeID = 0xbbfd72f3e045a1cb

func NewDirectory_Entry_Stream_push_Results(s *capnp.Segment) (Directory_Entry_Stream_push_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_push_Results{st}, err
}

func NewRootDirectory_Entry_Stream_push_Results(s *capnp.Segment) (Directory_Entry_Stream_push_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_push_Results{st}, err
}

func ReadRootDirectory_Entry_Stream_push_Results(msg *capnp.Message) (Directory_Entry_Stream_push_Results, error) {
	root, err := msg.Root()
	return Directory_Entry_Stream_push_Results{root.Struct()}, err
}

func (s Directory_Entry_Stream_push_Results) String() string {
	str, _ := text.Marshal(0xbbfd72f3e045a1cb, s.Struct)
	return str
}

// Directory_Entry_Stream_push_Results_List is a list of Directory_Entry_Stream_push_Results.
type Directory_Entry_Stream_push_Results_List struct{ capnp.List }

// NewDirectory_Entry_Stream_push_Results creates a new list of Directory_Entry_Stream_push_Results.
func NewDirectory_Entry_Stream_push_Results_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_push_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_Entry_Stream_push_Results_List{l}, err
}

func (s Directory_Entry_Stream_push_Results_List) At(i int) Directory_Entry_Stream_push_Results {
	return Directory_Entry_Stream_push_Results{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_push_Results_List) Set(i int, v Directory_Entry_Stream_push_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_push_Results_List) String() string {
	str, _ := text.MarshalList(0xbbfd72f3e045a1cb, s.List)
	return str
}

// Directory_Entry_Stream_push_Results_Future is a wrapper for a Directory_Entry_Stream_push_Results promised by a client call.
type Directory_Entry_Stream_push_Results_Future struct{ *capnp.Future }

func (p Directory_Entry_Stream_push_Results_Future) Struct() (Directory_Entry_Stream_push_Results, error) {
	s, err := p.Future.Struct()
	return Directory_Entry_Stream_push_Results{s}, err
}

type Directory_Entry_Stream_done_Params struct{ capnp.Struct }

// Directory_Entry_Stream_done_Params_TypeID is the unique identifier for the type Directory_Entry_Stream_done_Params.
const Directory_Entry_Stream_done_Params_TypeID = 0xbe65e735441bebd4

func NewDirectory_Entry_Stream_done_Params(s *capnp.Segment) (Directory_Entry_Stream_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Params{st}, err
}

func NewRootDirectory_Entry_Stream_done_Params(s *capnp.Segment) (Directory_Entry_Stream_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Params{st}, err
}

func ReadRootDirectory_Entry_Stream_done_Params(msg *capnp.Message) (Directory_Entry_Stream_done_Params, error) {
	root, err := msg.Root()
	return Directory_Entry_Stream_done_Params{root.Struct()}, err
}

func (s Directory_Entry_Stream_done_Params) String() string {
	str, _ := text.Marshal(0xbe65e735441bebd4, s.Struct)
	return str
}

// Directory_Entry_Stream_done_Params_List is a list of Directory_Entry_Stream_done_Params.
type Directory_Entry_Stream_done_Params_List struct{ capnp.List }

// NewDirectory_Entry_Stream_done_Params creates a new list of Directory_Entry_Stream_done_Params.
func NewDirectory_Entry_Stream_done_Params_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_Entry_Stream_done_Params_List{l}, err
}

func (s Directory_Entry_Stream_done_Params_List) At(i int) Directory_Entry_Stream_done_Params {
	return Directory_Entry_Stream_done_Params{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_done_Params_List) Set(i int, v Directory_Entry_Stream_done_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_done_Params_List) String() string {
	str, _ := text.MarshalList(0xbe65e735441bebd4, s.List)
	return str
}

// Directory_Entry_Stream_done_Params_Future is a wrapper for a Directory_Entry_Stream_done_Params promised by a client call.
type Directory_Entry_Stream_done_Params_Future struct{ *capnp.Future }

func (p Directory_Entry_Stream_done_Params_Future) Struct() (Directory_Entry_Stream_done_Params, error) {
	s, err := p.Future.Struct()
	return Directory_Entry_Stream_done_Params{s}, err
}

type Directory_Entry_Stream_done_Results struct{ capnp.Struct }

// Directory_Entry_Stream_done_Results_TypeID is the unique identifier for the type Directory_Entry_Stream_done_Results.
const Directory_Entry_Stream_done_Results_TypeID = 0xf9416c5b70b7b325

func NewDirectory_Entry_Stream_done_Results(s *capnp.Segment) (Directory_Entry_Stream_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Results{st}, err
}

func NewRootDirectory_Entry_Stream_done_Results(s *capnp.Segment) (Directory_Entry_Stream_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_Entry_Stream_done_Results{st}, err
}

func ReadRootDirectory_Entry_Stream_done_Results(msg *capnp.Message) (Directory_Entry_Stream_done_Results, error) {
	root, err := msg.Root()
	return Directory_Entry_Stream_done_Results{root.Struct()}, err
}

func (s Directory_Entry_Stream_done_Results) String() string {
	str, _ := text.Marshal(0xf9416c5b70b7b325, s.Struct)
	return str
}

// Directory_Entry_Stream_done_Results_List is a list of Directory_Entry_Stream_done_Results.
type Directory_Entry_Stream_done_Results_List struct{ capnp.List }

// NewDirectory_Entry_Stream_done_Results creates a new list of Directory_Entry_Stream_done_Results.
func NewDirectory_Entry_Stream_done_Results_List(s *capnp.Segment, sz int32) (Directory_Entry_Stream_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_Entry_Stream_done_Results_List{l}, err
}

func (s Directory_Entry_Stream_done_Results_List) At(i int) Directory_Entry_Stream_done_Results {
	return Directory_Entry_Stream_done_Results{s.List.Struct(i)}
}

func (s Directory_Entry_Stream_done_Results_List) Set(i int, v Directory_Entry_Stream_done_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_Entry_Stream_done_Results_List) String() string {
	str, _ := text.MarshalList(0xf9416c5b70b7b325, s.List)
	return str
}

// Directory_Entry_Stream_done_Results_Future is a wrapper for a Directory_Entry_Stream_done_Results promised by a client call.
type Directory_Entry_Stream_done_Results_Future struct{ *capnp.Future }

func (p Directory_Entry_Stream_done_Results_Future) Struct() (Directory_Entry_Stream_done_Results, error) {
	s, err := p.Future.Struct()
	return Directory_Entry_Stream_done_Results{s}, err
}

type Directory_list_Params struct{ capnp.Struct }

// Directory_list_Params_TypeID is the unique identifier for the type Directory_list_Params.
const Directory_list_Params_TypeID = 0xc9fd79ef566f6491

func NewDirectory_list_Params(s *capnp.Segment) (Directory_list_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_list_Params{st}, err
}

func NewRootDirectory_list_Params(s *capnp.Segment) (Directory_list_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_list_Params{st}, err
}

func ReadRootDirectory_list_Params(msg *capnp.Message) (Directory_list_Params, error) {
	root, err := msg.Root()
	return Directory_list_Params{root.Struct()}, err
}

func (s Directory_list_Params) String() string {
	str, _ := text.Marshal(0xc9fd79ef566f6491, s.Struct)
	return str
}

func (s Directory_list_Params) Stream() Directory_Entry_Stream {
	p, _ := s.Struct.Ptr(0)
	return Directory_Entry_Stream{Client: p.Interface().Client()}
}

func (s Directory_list_Params) HasStream() bool {
	return s.Struct.HasPtr(0)
}

func (s Directory_list_Params) SetStream(v Directory_Entry_Stream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Directory_list_Params_List is a list of Directory_list_Params.
type Directory_list_Params_List struct{ capnp.List }

// NewDirectory_list_Params creates a new list of Directory_list_Params.
func NewDirectory_list_Params_List(s *capnp.Segment, sz int32) (Directory_list_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_list_Params_List{l}, err
}

func (s Directory_list_Params_List) At(i int) Directory_list_Params {
	return Directory_list_Params{s.List.Struct(i)}
}

func (s Directory_list_Params_List) Set(i int, v Directory_list_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_list_Params_List) String() string {
	str, _ := text.MarshalList(0xc9fd79ef566f6491, s.List)
	return str
}

// Directory_list_Params_Future is a wrapper for a Directory_list_Params promised by a client call.
type Directory_list_Params_Future struct{ *capnp.Future }

func (p Directory_list_Params_Future) Struct() (Directory_list_Params, error) {
	s, err := p.Future.Struct()
	return Directory_list_Params{s}, err
}

func (p Directory_list_Params_Future) Stream() Directory_Entry_Stream {
	return Directory_Entry_Stream{Client: p.Future.Field(0, nil).Client()}
}

type Directory_list_Results struct{ capnp.Struct }

// Directory_list_Results_TypeID is the unique identifier for the type Directory_list_Results.
const Directory_list_Results_TypeID = 0xc2126cc87a7099f2

func NewDirectory_list_Results(s *capnp.Segment) (Directory_list_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_list_Results{st}, err
}

func NewRootDirectory_list_Results(s *capnp.Segment) (Directory_list_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Directory_list_Results{st}, err
}

func ReadRootDirectory_list_Results(msg *capnp.Message) (Directory_list_Results, error) {
	root, err := msg.Root()
	return Directory_list_Results{root.Struct()}, err
}

func (s Directory_list_Results) String() string {
	str, _ := text.Marshal(0xc2126cc87a7099f2, s.Struct)
	return str
}

// Directory_list_Results_List is a list of Directory_list_Results.
type Directory_list_Results_List struct{ capnp.List }

// NewDirectory_list_Results creates a new list of Directory_list_Results.
func NewDirectory_list_Results_List(s *capnp.Segment, sz int32) (Directory_list_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Directory_list_Results_List{l}, err
}

func (s Directory_list_Results_List) At(i int) Directory_list_Results {
	return Directory_list_Results{s.List.Struct(i)}
}

func (s Directory_list_Results_List) Set(i int, v Directory_list_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_list_Results_List) String() string {
	str, _ := text.MarshalList(0xc2126cc87a7099f2, s.List)
	return str
}

// Directory_list_Results_Future is a wrapper for a Directory_list_Results promised by a client call.
type Directory_list_Results_Future struct{ *capnp.Future }

func (p Directory_list_Results_Future) Struct() (Directory_list_Results, error) {
	s, err := p.Future.Struct()
	return Directory_list_Results{s}, err
}

type Directory_walk_Params struct{ capnp.Struct }

// Directory_walk_Params_TypeID is the unique identifier for the type Directory_walk_Params.
const Directory_walk_Params_TypeID = 0xb16b8959a58277ee

func NewDirectory_walk_Params(s *capnp.Segment) (Directory_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Params{st}, err
}

func NewRootDirectory_walk_Params(s *capnp.Segment) (Directory_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Params{st}, err
}

func ReadRootDirectory_walk_Params(msg *capnp.Message) (Directory_walk_Params, error) {
	root, err := msg.Root()
	return Directory_walk_Params{root.Struct()}, err
}

func (s Directory_walk_Params) String() string {
	str, _ := text.Marshal(0xb16b8959a58277ee, s.Struct)
	return str
}

func (s Directory_walk_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Directory_walk_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Directory_walk_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Directory_walk_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// Directory_walk_Params_List is a list of Directory_walk_Params.
type Directory_walk_Params_List struct{ capnp.List }

// NewDirectory_walk_Params creates a new list of Directory_walk_Params.
func NewDirectory_walk_Params_List(s *capnp.Segment, sz int32) (Directory_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_walk_Params_List{l}, err
}

func (s Directory_walk_Params_List) At(i int) Directory_walk_Params {
	return Directory_walk_Params{s.List.Struct(i)}
}

func (s Directory_walk_Params_List) Set(i int, v Directory_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xb16b8959a58277ee, s.List)
	return str
}

// Directory_walk_Params_Future is a wrapper for a Directory_walk_Params promised by a client call.
type Directory_walk_Params_Future struct{ *capnp.Future }

func (p Directory_walk_Params_Future) Struct() (Directory_walk_Params, error) {
	s, err := p.Future.Struct()
	return Directory_walk_Params{s}, err
}

type Directory_walk_Results struct{ capnp.Struct }

// Directory_walk_Results_TypeID is the unique identifier for the type Directory_walk_Results.
const Directory_walk_Results_TypeID = 0x8353ac6eac2573f2

func NewDirectory_walk_Results(s *capnp.Segment) (Directory_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Results{st}, err
}

func NewRootDirectory_walk_Results(s *capnp.Segment) (Directory_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Directory_walk_Results{st}, err
}

func ReadRootDirectory_walk_Results(msg *capnp.Message) (Directory_walk_Results, error) {
	root, err := msg.Root()
	return Directory_walk_Results{root.Struct()}, err
}

func (s Directory_walk_Results) String() string {
	str, _ := text.Marshal(0x8353ac6eac2573f2, s.Struct)
	return str
}

func (s Directory_walk_Results) Node() Node {
	p, _ := s.Struct.Ptr(0)
	return Node{Client: p.Interface().Client()}
}

func (s Directory_walk_Results) HasNode() bool {
	return s.Struct.HasPtr(0)
}

func (s Directory_walk_Results) SetNode(v Node) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Directory_walk_Results_List is a list of Directory_walk_Results.
type Directory_walk_Results_List struct{ capnp.List }

// NewDirectory_walk_Results creates a new list of Directory_walk_Results.
func NewDirectory_walk_Results_List(s *capnp.Segment, sz int32) (Directory_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Directory_walk_Results_List{l}, err
}

func (s Directory_walk_Results_List) At(i int) Directory_walk_Results {
	return Directory_walk_Results{s.List.Struct(i)}
}

func (s Directory_walk_Results_List) Set(i int, v Directory_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Directory_walk_Results_List) String() string {
	str, _ := text.MarshalList(0x8353ac6eac2573f2, s.List)
	return str
}

// Directory_walk_Results_Future is a wrapper for a Directory_walk_Results promised by a client call.
type Directory_walk_Results_Future struct{ *capnp.Future }

func (p Directory_walk_Results_Future) Struct() (Directory_walk_Results, error) {
	s, err := p.Future.Struct()
	return Directory_walk_Results{s}, err
}

func (p Directory_walk_Results_Future) Node() Node {
	return Node{Client: p.Future.Field(0, nil).Client()}
}

type RwDirectory struct{ Client *capnp.Client }

// RwDirectory_TypeID is the unique identifier for the type RwDirectory.
const RwDirectory_TypeID = 0xdffe2836f5c5dffc

func (c RwDirectory) Create(ctx context.Context, params func(RwDirectory_create_Params) error) (RwDirectory_create_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "create",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RwDirectory_create_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RwDirectory_create_Results_Future{Future: ans.Future()}, release
}
func (c RwDirectory) Mkdir(ctx context.Context, params func(RwDirectory_mkdir_Params) error) (RwDirectory_mkdir_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "mkdir",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RwDirectory_mkdir_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RwDirectory_mkdir_Results_Future{Future: ans.Future()}, release
}
func (c RwDirectory) Delete(ctx context.Context, params func(RwDirectory_delete_Params) error) (RwDirectory_delete_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "delete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RwDirectory_delete_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RwDirectory_delete_Results_Future{Future: ans.Future()}, release
}
func (c RwDirectory) List(ctx context.Context, params func(Directory_list_Params) error) (Directory_list_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Directory_list_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Directory_list_Results_Future{Future: ans.Future()}, release
}
func (c RwDirectory) Walk(ctx context.Context, params func(Directory_walk_Params) error) (Directory_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Directory_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Directory_walk_Results_Future{Future: ans.Future()}, release
}
func (c RwDirectory) Stat(ctx context.Context, params func(Node_stat_Params) error) (Node_stat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Node_stat_Results_Future{Future: ans.Future()}, release
}

// A RwDirectory_Server is a RwDirectory with a local implementation.
type RwDirectory_Server interface {
	Create(context.Context, RwDirectory_create) error

	Mkdir(context.Context, RwDirectory_mkdir) error

	Delete(context.Context, RwDirectory_delete) error

	List(context.Context, Directory_list) error

	Walk(context.Context, Directory_walk) error

	Stat(context.Context, Node_stat) error
}

// RwDirectory_NewServer creates a new Server from an implementation of RwDirectory_Server.
func RwDirectory_NewServer(s RwDirectory_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RwDirectory_Methods(nil, s), s, c, policy)
}

// RwDirectory_ServerToClient creates a new Client from an implementation of RwDirectory_Server.
// The caller is responsible for calling Release on the returned Client.
func RwDirectory_ServerToClient(s RwDirectory_Server, policy *server.Policy) RwDirectory {
	return RwDirectory{Client: capnp.NewClient(RwDirectory_NewServer(s, policy))}
}

// RwDirectory_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RwDirectory_Methods(methods []server.Method, s RwDirectory_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "create",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Create(ctx, RwDirectory_create{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "mkdir",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Mkdir(ctx, RwDirectory_mkdir{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdffe2836f5c5dffc,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwDirectory",
			MethodName:    "delete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Delete(ctx, RwDirectory_delete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "list",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.List(ctx, Directory_list{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xce3039544779e0fc,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:Directory",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Directory_walk{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stat(ctx, Node_stat{call})
		},
	})

	return methods
}

// RwDirectory_create holds the state for a server call to RwDirectory.create.
// See server.Call for documentation.
type RwDirectory_create struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RwDirectory_create) Args() RwDirectory_create_Params {
	return RwDirectory_create_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RwDirectory_create) AllocResults() (RwDirectory_create_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_create_Results{Struct: r}, err
}

// RwDirectory_mkdir holds the state for a server call to RwDirectory.mkdir.
// See server.Call for documentation.
type RwDirectory_mkdir struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RwDirectory_mkdir) Args() RwDirectory_mkdir_Params {
	return RwDirectory_mkdir_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RwDirectory_mkdir) AllocResults() (RwDirectory_mkdir_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Results{Struct: r}, err
}

// RwDirectory_delete holds the state for a server call to RwDirectory.delete.
// See server.Call for documentation.
type RwDirectory_delete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RwDirectory_delete) Args() RwDirectory_delete_Params {
	return RwDirectory_delete_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RwDirectory_delete) AllocResults() (RwDirectory_delete_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwDirectory_delete_Results{Struct: r}, err
}

type RwDirectory_create_Params struct{ capnp.Struct }

// RwDirectory_create_Params_TypeID is the unique identifier for the type RwDirectory_create_Params.
const RwDirectory_create_Params_TypeID = 0xedd8b7765a623c77

func NewRwDirectory_create_Params(s *capnp.Segment) (RwDirectory_create_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RwDirectory_create_Params{st}, err
}

func NewRootRwDirectory_create_Params(s *capnp.Segment) (RwDirectory_create_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return RwDirectory_create_Params{st}, err
}

func ReadRootRwDirectory_create_Params(msg *capnp.Message) (RwDirectory_create_Params, error) {
	root, err := msg.Root()
	return RwDirectory_create_Params{root.Struct()}, err
}

func (s RwDirectory_create_Params) String() string {
	str, _ := text.Marshal(0xedd8b7765a623c77, s.Struct)
	return str
}

func (s RwDirectory_create_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RwDirectory_create_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s RwDirectory_create_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RwDirectory_create_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s RwDirectory_create_Params) Executable() bool {
	return s.Struct.Bit(0)
}

func (s RwDirectory_create_Params) SetExecutable(v bool) {
	s.Struct.SetBit(0, v)
}

// RwDirectory_create_Params_List is a list of RwDirectory_create_Params.
type RwDirectory_create_Params_List struct{ capnp.List }

// NewRwDirectory_create_Params creates a new list of RwDirectory_create_Params.
func NewRwDirectory_create_Params_List(s *capnp.Segment, sz int32) (RwDirectory_create_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return RwDirectory_create_Params_List{l}, err
}

func (s RwDirectory_create_Params_List) At(i int) RwDirectory_create_Params {
	return RwDirectory_create_Params{s.List.Struct(i)}
}

func (s RwDirectory_create_Params_List) Set(i int, v RwDirectory_create_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_create_Params_List) String() string {
	str, _ := text.MarshalList(0xedd8b7765a623c77, s.List)
	return str
}

// RwDirectory_create_Params_Future is a wrapper for a RwDirectory_create_Params promised by a client call.
type RwDirectory_create_Params_Future struct{ *capnp.Future }

func (p RwDirectory_create_Params_Future) Struct() (RwDirectory_create_Params, error) {
	s, err := p.Future.Struct()
	return RwDirectory_create_Params{s}, err
}

type RwDirectory_create_Results struct{ capnp.Struct }

// RwDirectory_create_Results_TypeID is the unique identifier for the type RwDirectory_create_Results.
const RwDirectory_create_Results_TypeID = 0xccdb75f03a83cd44

func NewRwDirectory_create_Results(s *capnp.Segment) (RwDirectory_create_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_create_Results{st}, err
}

func NewRootRwDirectory_create_Results(s *capnp.Segment) (RwDirectory_create_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_create_Results{st}, err
}

func ReadRootRwDirectory_create_Results(msg *capnp.Message) (RwDirectory_create_Results, error) {
	root, err := msg.Root()
	return RwDirectory_create_Results{root.Struct()}, err
}

func (s RwDirectory_create_Results) String() string {
	str, _ := text.Marshal(0xccdb75f03a83cd44, s.Struct)
	return str
}

func (s RwDirectory_create_Results) File() RwFile {
	p, _ := s.Struct.Ptr(0)
	return RwFile{Client: p.Interface().Client()}
}

func (s RwDirectory_create_Results) HasFile() bool {
	return s.Struct.HasPtr(0)
}

func (s RwDirectory_create_Results) SetFile(v RwFile) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RwDirectory_create_Results_List is a list of RwDirectory_create_Results.
type RwDirectory_create_Results_List struct{ capnp.List }

// NewRwDirectory_create_Results creates a new list of RwDirectory_create_Results.
func NewRwDirectory_create_Results_List(s *capnp.Segment, sz int32) (RwDirectory_create_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_create_Results_List{l}, err
}

func (s RwDirectory_create_Results_List) At(i int) RwDirectory_create_Results {
	return RwDirectory_create_Results{s.List.Struct(i)}
}

func (s RwDirectory_create_Results_List) Set(i int, v RwDirectory_create_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_create_Results_List) String() string {
	str, _ := text.MarshalList(0xccdb75f03a83cd44, s.List)
	return str
}

// RwDirectory_create_Results_Future is a wrapper for a RwDirectory_create_Results promised by a client call.
type RwDirectory_create_Results_Future struct{ *capnp.Future }

func (p RwDirectory_create_Results_Future) Struct() (RwDirectory_create_Results, error) {
	s, err := p.Future.Struct()
	return RwDirectory_create_Results{s}, err
}

func (p RwDirectory_create_Results_Future) File() RwFile {
	return RwFile{Client: p.Future.Field(0, nil).Client()}
}

type RwDirectory_mkdir_Params struct{ capnp.Struct }

// RwDirectory_mkdir_Params_TypeID is the unique identifier for the type RwDirectory_mkdir_Params.
const RwDirectory_mkdir_Params_TypeID = 0xc264d071767f0ab6

func NewRwDirectory_mkdir_Params(s *capnp.Segment) (RwDirectory_mkdir_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Params{st}, err
}

func NewRootRwDirectory_mkdir_Params(s *capnp.Segment) (RwDirectory_mkdir_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Params{st}, err
}

func ReadRootRwDirectory_mkdir_Params(msg *capnp.Message) (RwDirectory_mkdir_Params, error) {
	root, err := msg.Root()
	return RwDirectory_mkdir_Params{root.Struct()}, err
}

func (s RwDirectory_mkdir_Params) String() string {
	str, _ := text.Marshal(0xc264d071767f0ab6, s.Struct)
	return str
}

func (s RwDirectory_mkdir_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RwDirectory_mkdir_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s RwDirectory_mkdir_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RwDirectory_mkdir_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// RwDirectory_mkdir_Params_List is a list of RwDirectory_mkdir_Params.
type RwDirectory_mkdir_Params_List struct{ capnp.List }

// NewRwDirectory_mkdir_Params creates a new list of RwDirectory_mkdir_Params.
func NewRwDirectory_mkdir_Params_List(s *capnp.Segment, sz int32) (RwDirectory_mkdir_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_mkdir_Params_List{l}, err
}

func (s RwDirectory_mkdir_Params_List) At(i int) RwDirectory_mkdir_Params {
	return RwDirectory_mkdir_Params{s.List.Struct(i)}
}

func (s RwDirectory_mkdir_Params_List) Set(i int, v RwDirectory_mkdir_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_mkdir_Params_List) String() string {
	str, _ := text.MarshalList(0xc264d071767f0ab6, s.List)
	return str
}

// RwDirectory_mkdir_Params_Future is a wrapper for a RwDirectory_mkdir_Params promised by a client call.
type RwDirectory_mkdir_Params_Future struct{ *capnp.Future }

func (p RwDirectory_mkdir_Params_Future) Struct() (RwDirectory_mkdir_Params, error) {
	s, err := p.Future.Struct()
	return RwDirectory_mkdir_Params{s}, err
}

type RwDirectory_mkdir_Results struct{ capnp.Struct }

// RwDirectory_mkdir_Results_TypeID is the unique identifier for the type RwDirectory_mkdir_Results.
const RwDirectory_mkdir_Results_TypeID = 0xb7774b1c65f804fa

func NewRwDirectory_mkdir_Results(s *capnp.Segment) (RwDirectory_mkdir_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Results{st}, err
}

func NewRootRwDirectory_mkdir_Results(s *capnp.Segment) (RwDirectory_mkdir_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_mkdir_Results{st}, err
}

func ReadRootRwDirectory_mkdir_Results(msg *capnp.Message) (RwDirectory_mkdir_Results, error) {
	root, err := msg.Root()
	return RwDirectory_mkdir_Results{root.Struct()}, err
}

func (s RwDirectory_mkdir_Results) String() string {
	str, _ := text.Marshal(0xb7774b1c65f804fa, s.Struct)
	return str
}

func (s RwDirectory_mkdir_Results) Dir() RwDirectory {
	p, _ := s.Struct.Ptr(0)
	return RwDirectory{Client: p.Interface().Client()}
}

func (s RwDirectory_mkdir_Results) HasDir() bool {
	return s.Struct.HasPtr(0)
}

func (s RwDirectory_mkdir_Results) SetDir(v RwDirectory) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RwDirectory_mkdir_Results_List is a list of RwDirectory_mkdir_Results.
type RwDirectory_mkdir_Results_List struct{ capnp.List }

// NewRwDirectory_mkdir_Results creates a new list of RwDirectory_mkdir_Results.
func NewRwDirectory_mkdir_Results_List(s *capnp.Segment, sz int32) (RwDirectory_mkdir_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_mkdir_Results_List{l}, err
}

func (s RwDirectory_mkdir_Results_List) At(i int) RwDirectory_mkdir_Results {
	return RwDirectory_mkdir_Results{s.List.Struct(i)}
}

func (s RwDirectory_mkdir_Results_List) Set(i int, v RwDirectory_mkdir_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_mkdir_Results_List) String() string {
	str, _ := text.MarshalList(0xb7774b1c65f804fa, s.List)
	return str
}

// RwDirectory_mkdir_Results_Future is a wrapper for a RwDirectory_mkdir_Results promised by a client call.
type RwDirectory_mkdir_Results_Future struct{ *capnp.Future }

func (p RwDirectory_mkdir_Results_Future) Struct() (RwDirectory_mkdir_Results, error) {
	s, err := p.Future.Struct()
	return RwDirectory_mkdir_Results{s}, err
}

func (p RwDirectory_mkdir_Results_Future) Dir() RwDirectory {
	return RwDirectory{Client: p.Future.Field(0, nil).Client()}
}

type RwDirectory_delete_Params struct{ capnp.Struct }

// RwDirectory_delete_Params_TypeID is the unique identifier for the type RwDirectory_delete_Params.
const RwDirectory_delete_Params_TypeID = 0xcf03bca4fb87f453

func NewRwDirectory_delete_Params(s *capnp.Segment) (RwDirectory_delete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_delete_Params{st}, err
}

func NewRootRwDirectory_delete_Params(s *capnp.Segment) (RwDirectory_delete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwDirectory_delete_Params{st}, err
}

func ReadRootRwDirectory_delete_Params(msg *capnp.Message) (RwDirectory_delete_Params, error) {
	root, err := msg.Root()
	return RwDirectory_delete_Params{root.Struct()}, err
}

func (s RwDirectory_delete_Params) String() string {
	str, _ := text.Marshal(0xcf03bca4fb87f453, s.Struct)
	return str
}

func (s RwDirectory_delete_Params) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s RwDirectory_delete_Params) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s RwDirectory_delete_Params) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s RwDirectory_delete_Params) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

// RwDirectory_delete_Params_List is a list of RwDirectory_delete_Params.
type RwDirectory_delete_Params_List struct{ capnp.List }

// NewRwDirectory_delete_Params creates a new list of RwDirectory_delete_Params.
func NewRwDirectory_delete_Params_List(s *capnp.Segment, sz int32) (RwDirectory_delete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwDirectory_delete_Params_List{l}, err
}

func (s RwDirectory_delete_Params_List) At(i int) RwDirectory_delete_Params {
	return RwDirectory_delete_Params{s.List.Struct(i)}
}

func (s RwDirectory_delete_Params_List) Set(i int, v RwDirectory_delete_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_delete_Params_List) String() string {
	str, _ := text.MarshalList(0xcf03bca4fb87f453, s.List)
	return str
}

// RwDirectory_delete_Params_Future is a wrapper for a RwDirectory_delete_Params promised by a client call.
type RwDirectory_delete_Params_Future struct{ *capnp.Future }

func (p RwDirectory_delete_Params_Future) Struct() (RwDirectory_delete_Params, error) {
	s, err := p.Future.Struct()
	return RwDirectory_delete_Params{s}, err
}

type RwDirectory_delete_Results struct{ capnp.Struct }

// RwDirectory_delete_Results_TypeID is the unique identifier for the type RwDirectory_delete_Results.
const RwDirectory_delete_Results_TypeID = 0xff0de3e62887d2f0

func NewRwDirectory_delete_Results(s *capnp.Segment) (RwDirectory_delete_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwDirectory_delete_Results{st}, err
}

func NewRootRwDirectory_delete_Results(s *capnp.Segment) (RwDirectory_delete_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwDirectory_delete_Results{st}, err
}

func ReadRootRwDirectory_delete_Results(msg *capnp.Message) (RwDirectory_delete_Results, error) {
	root, err := msg.Root()
	return RwDirectory_delete_Results{root.Struct()}, err
}

func (s RwDirectory_delete_Results) String() string {
	str, _ := text.Marshal(0xff0de3e62887d2f0, s.Struct)
	return str
}

// RwDirectory_delete_Results_List is a list of RwDirectory_delete_Results.
type RwDirectory_delete_Results_List struct{ capnp.List }

// NewRwDirectory_delete_Results creates a new list of RwDirectory_delete_Results.
func NewRwDirectory_delete_Results_List(s *capnp.Segment, sz int32) (RwDirectory_delete_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RwDirectory_delete_Results_List{l}, err
}

func (s RwDirectory_delete_Results_List) At(i int) RwDirectory_delete_Results {
	return RwDirectory_delete_Results{s.List.Struct(i)}
}

func (s RwDirectory_delete_Results_List) Set(i int, v RwDirectory_delete_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwDirectory_delete_Results_List) String() string {
	str, _ := text.MarshalList(0xff0de3e62887d2f0, s.List)
	return str
}

// RwDirectory_delete_Results_Future is a wrapper for a RwDirectory_delete_Results promised by a client call.
type RwDirectory_delete_Results_Future struct{ *capnp.Future }

func (p RwDirectory_delete_Results_Future) Struct() (RwDirectory_delete_Results, error) {
	s, err := p.Future.Struct()
	return RwDirectory_delete_Results{s}, err
}

type File struct{ Client *capnp.Client }

// File_TypeID is the unique identifier for the type File.
const File_TypeID = 0xaa5b133d60884bbd

func (c File) Read(ctx context.Context, params func(File_read_Params) error) (File_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(File_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return File_read_Results_Future{Future: ans.Future()}, release
}
func (c File) Stat(ctx context.Context, params func(Node_stat_Params) error) (Node_stat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Node_stat_Results_Future{Future: ans.Future()}, release
}

// A File_Server is a File with a local implementation.
type File_Server interface {
	Read(context.Context, File_read) error

	Stat(context.Context, Node_stat) error
}

// File_NewServer creates a new Server from an implementation of File_Server.
func File_NewServer(s File_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(File_Methods(nil, s), s, c, policy)
}

// File_ServerToClient creates a new Client from an implementation of File_Server.
// The caller is responsible for calling Release on the returned Client.
func File_ServerToClient(s File_Server, policy *server.Policy) File {
	return File{Client: capnp.NewClient(File_NewServer(s, policy))}
}

// File_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func File_Methods(methods []server.Method, s File_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, File_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stat(ctx, Node_stat{call})
		},
	})

	return methods
}

// File_read holds the state for a server call to File.read.
// See server.Call for documentation.
type File_read struct {
	*server.Call
}

// Args returns the call's arguments.
func (c File_read) Args() File_read_Params {
	return File_read_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c File_read) AllocResults() (File_read_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return File_read_Results{Struct: r}, err
}

type File_read_Params struct{ capnp.Struct }

// File_read_Params_TypeID is the unique identifier for the type File_read_Params.
const File_read_Params_TypeID = 0xfb1101f5d0d1edeb

func NewFile_read_Params(s *capnp.Segment) (File_read_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return File_read_Params{st}, err
}

func NewRootFile_read_Params(s *capnp.Segment) (File_read_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return File_read_Params{st}, err
}

func ReadRootFile_read_Params(msg *capnp.Message) (File_read_Params, error) {
	root, err := msg.Root()
	return File_read_Params{root.Struct()}, err
}

func (s File_read_Params) String() string {
	str, _ := text.Marshal(0xfb1101f5d0d1edeb, s.Struct)
	return str
}

func (s File_read_Params) StartAt() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s File_read_Params) SetStartAt(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s File_read_Params) Amount() uint64 {
	return s.Struct.Uint64(8)
}

func (s File_read_Params) SetAmount(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s File_read_Params) Sink() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s File_read_Params) HasSink() bool {
	return s.Struct.HasPtr(0)
}

func (s File_read_Params) SetSink(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// File_read_Params_List is a list of File_read_Params.
type File_read_Params_List struct{ capnp.List }

// NewFile_read_Params creates a new list of File_read_Params.
func NewFile_read_Params_List(s *capnp.Segment, sz int32) (File_read_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return File_read_Params_List{l}, err
}

func (s File_read_Params_List) At(i int) File_read_Params { return File_read_Params{s.List.Struct(i)} }

func (s File_read_Params_List) Set(i int, v File_read_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s File_read_Params_List) String() string {
	str, _ := text.MarshalList(0xfb1101f5d0d1edeb, s.List)
	return str
}

// File_read_Params_Future is a wrapper for a File_read_Params promised by a client call.
type File_read_Params_Future struct{ *capnp.Future }

func (p File_read_Params_Future) Struct() (File_read_Params, error) {
	s, err := p.Future.Struct()
	return File_read_Params{s}, err
}

func (p File_read_Params_Future) Sink() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type File_read_Results struct{ capnp.Struct }

// File_read_Results_TypeID is the unique identifier for the type File_read_Results.
const File_read_Results_TypeID = 0xd6e8aca7864c2c0a

func NewFile_read_Results(s *capnp.Segment) (File_read_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return File_read_Results{st}, err
}

func NewRootFile_read_Results(s *capnp.Segment) (File_read_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return File_read_Results{st}, err
}

func ReadRootFile_read_Results(msg *capnp.Message) (File_read_Results, error) {
	root, err := msg.Root()
	return File_read_Results{root.Struct()}, err
}

func (s File_read_Results) String() string {
	str, _ := text.Marshal(0xd6e8aca7864c2c0a, s.Struct)
	return str
}

// File_read_Results_List is a list of File_read_Results.
type File_read_Results_List struct{ capnp.List }

// NewFile_read_Results creates a new list of File_read_Results.
func NewFile_read_Results_List(s *capnp.Segment, sz int32) (File_read_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return File_read_Results_List{l}, err
}

func (s File_read_Results_List) At(i int) File_read_Results {
	return File_read_Results{s.List.Struct(i)}
}

func (s File_read_Results_List) Set(i int, v File_read_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s File_read_Results_List) String() string {
	str, _ := text.MarshalList(0xd6e8aca7864c2c0a, s.List)
	return str
}

// File_read_Results_Future is a wrapper for a File_read_Results promised by a client call.
type File_read_Results_Future struct{ *capnp.Future }

func (p File_read_Results_Future) Struct() (File_read_Results, error) {
	s, err := p.Future.Struct()
	return File_read_Results{s}, err
}

type RwFile struct{ Client *capnp.Client }

// RwFile_TypeID is the unique identifier for the type RwFile.
const RwFile_TypeID = 0xb4810121539f6e53

func (c RwFile) Write(ctx context.Context, params func(RwFile_write_Params) error) (RwFile_write_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RwFile_write_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RwFile_write_Results_Future{Future: ans.Future()}, release
}
func (c RwFile) Truncate(ctx context.Context, params func(RwFile_truncate_Params) error) (RwFile_truncate_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "truncate",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RwFile_truncate_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RwFile_truncate_Results_Future{Future: ans.Future()}, release
}
func (c RwFile) SetExec(ctx context.Context, params func(RwFile_setExec_Params) error) (RwFile_setExec_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "setExec",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RwFile_setExec_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return RwFile_setExec_Results_Future{Future: ans.Future()}, release
}
func (c RwFile) Read(ctx context.Context, params func(File_read_Params) error) (File_read_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(File_read_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return File_read_Results_Future{Future: ans.Future()}, release
}
func (c RwFile) Stat(ctx context.Context, params func(Node_stat_Params) error) (Node_stat_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Node_stat_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Node_stat_Results_Future{Future: ans.Future()}, release
}

// A RwFile_Server is a RwFile with a local implementation.
type RwFile_Server interface {
	Write(context.Context, RwFile_write) error

	Truncate(context.Context, RwFile_truncate) error

	SetExec(context.Context, RwFile_setExec) error

	Read(context.Context, File_read) error

	Stat(context.Context, Node_stat) error
}

// RwFile_NewServer creates a new Server from an implementation of RwFile_Server.
func RwFile_NewServer(s RwFile_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RwFile_Methods(nil, s), s, c, policy)
}

// RwFile_ServerToClient creates a new Client from an implementation of RwFile_Server.
// The caller is responsible for calling Release on the returned Client.
func RwFile_ServerToClient(s RwFile_Server, policy *server.Policy) RwFile {
	return RwFile{Client: capnp.NewClient(RwFile_NewServer(s, policy))}
}

// RwFile_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RwFile_Methods(methods []server.Method, s RwFile_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, RwFile_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      1,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "truncate",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Truncate(ctx, RwFile_truncate{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb4810121539f6e53,
			MethodID:      2,
			InterfaceName: "filesystem.capnp:RwFile",
			MethodName:    "setExec",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetExec(ctx, RwFile_setExec{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xaa5b133d60884bbd,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:File",
			MethodName:    "read",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Read(ctx, File_read{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x955400781a01b061,
			MethodID:      0,
			InterfaceName: "filesystem.capnp:Node",
			MethodName:    "stat",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stat(ctx, Node_stat{call})
		},
	})

	return methods
}

// RwFile_write holds the state for a server call to RwFile.write.
// See server.Call for documentation.
type RwFile_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RwFile_write) Args() RwFile_write_Params {
	return RwFile_write_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RwFile_write) AllocResults() (RwFile_write_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwFile_write_Results{Struct: r}, err
}

// RwFile_truncate holds the state for a server call to RwFile.truncate.
// See server.Call for documentation.
type RwFile_truncate struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RwFile_truncate) Args() RwFile_truncate_Params {
	return RwFile_truncate_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RwFile_truncate) AllocResults() (RwFile_truncate_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_truncate_Results{Struct: r}, err
}

// RwFile_setExec holds the state for a server call to RwFile.setExec.
// See server.Call for documentation.
type RwFile_setExec struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RwFile_setExec) Args() RwFile_setExec_Params {
	return RwFile_setExec_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c RwFile_setExec) AllocResults() (RwFile_setExec_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_setExec_Results{Struct: r}, err
}

type RwFile_write_Params struct{ capnp.Struct }

// RwFile_write_Params_TypeID is the unique identifier for the type RwFile_write_Params.
const RwFile_write_Params_TypeID = 0xec401fdf2c149f1b

func NewRwFile_write_Params(s *capnp.Segment) (RwFile_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_write_Params{st}, err
}

func NewRootRwFile_write_Params(s *capnp.Segment) (RwFile_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_write_Params{st}, err
}

func ReadRootRwFile_write_Params(msg *capnp.Message) (RwFile_write_Params, error) {
	root, err := msg.Root()
	return RwFile_write_Params{root.Struct()}, err
}

func (s RwFile_write_Params) String() string {
	str, _ := text.Marshal(0xec401fdf2c149f1b, s.Struct)
	return str
}

func (s RwFile_write_Params) StartAt() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s RwFile_write_Params) SetStartAt(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// RwFile_write_Params_List is a list of RwFile_write_Params.
type RwFile_write_Params_List struct{ capnp.List }

// NewRwFile_write_Params creates a new list of RwFile_write_Params.
func NewRwFile_write_Params_List(s *capnp.Segment, sz int32) (RwFile_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RwFile_write_Params_List{l}, err
}

func (s RwFile_write_Params_List) At(i int) RwFile_write_Params {
	return RwFile_write_Params{s.List.Struct(i)}
}

func (s RwFile_write_Params_List) Set(i int, v RwFile_write_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_write_Params_List) String() string {
	str, _ := text.MarshalList(0xec401fdf2c149f1b, s.List)
	return str
}

// RwFile_write_Params_Future is a wrapper for a RwFile_write_Params promised by a client call.
type RwFile_write_Params_Future struct{ *capnp.Future }

func (p RwFile_write_Params_Future) Struct() (RwFile_write_Params, error) {
	s, err := p.Future.Struct()
	return RwFile_write_Params{s}, err
}

type RwFile_write_Results struct{ capnp.Struct }

// RwFile_write_Results_TypeID is the unique identifier for the type RwFile_write_Results.
const RwFile_write_Results_TypeID = 0x83db8ff5946e5b09

func NewRwFile_write_Results(s *capnp.Segment) (RwFile_write_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwFile_write_Results{st}, err
}

func NewRootRwFile_write_Results(s *capnp.Segment) (RwFile_write_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RwFile_write_Results{st}, err
}

func ReadRootRwFile_write_Results(msg *capnp.Message) (RwFile_write_Results, error) {
	root, err := msg.Root()
	return RwFile_write_Results{root.Struct()}, err
}

func (s RwFile_write_Results) String() string {
	str, _ := text.Marshal(0x83db8ff5946e5b09, s.Struct)
	return str
}

func (s RwFile_write_Results) Sink() util.ByteStream {
	p, _ := s.Struct.Ptr(0)
	return util.ByteStream{Client: p.Interface().Client()}
}

func (s RwFile_write_Results) HasSink() bool {
	return s.Struct.HasPtr(0)
}

func (s RwFile_write_Results) SetSink(v util.ByteStream) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// RwFile_write_Results_List is a list of RwFile_write_Results.
type RwFile_write_Results_List struct{ capnp.List }

// NewRwFile_write_Results creates a new list of RwFile_write_Results.
func NewRwFile_write_Results_List(s *capnp.Segment, sz int32) (RwFile_write_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RwFile_write_Results_List{l}, err
}

func (s RwFile_write_Results_List) At(i int) RwFile_write_Results {
	return RwFile_write_Results{s.List.Struct(i)}
}

func (s RwFile_write_Results_List) Set(i int, v RwFile_write_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_write_Results_List) String() string {
	str, _ := text.MarshalList(0x83db8ff5946e5b09, s.List)
	return str
}

// RwFile_write_Results_Future is a wrapper for a RwFile_write_Results promised by a client call.
type RwFile_write_Results_Future struct{ *capnp.Future }

func (p RwFile_write_Results_Future) Struct() (RwFile_write_Results, error) {
	s, err := p.Future.Struct()
	return RwFile_write_Results{s}, err
}

func (p RwFile_write_Results_Future) Sink() util.ByteStream {
	return util.ByteStream{Client: p.Future.Field(0, nil).Client()}
}

type RwFile_truncate_Params struct{ capnp.Struct }

// RwFile_truncate_Params_TypeID is the unique identifier for the type RwFile_truncate_Params.
const RwFile_truncate_Params_TypeID = 0xbf2ae4dc7cac598c

func NewRwFile_truncate_Params(s *capnp.Segment) (RwFile_truncate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_truncate_Params{st}, err
}

func NewRootRwFile_truncate_Params(s *capnp.Segment) (RwFile_truncate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_truncate_Params{st}, err
}

func ReadRootRwFile_truncate_Params(msg *capnp.Message) (RwFile_truncate_Params, error) {
	root, err := msg.Root()
	return RwFile_truncate_Params{root.Struct()}, err
}

func (s RwFile_truncate_Params) String() string {
	str, _ := text.Marshal(0xbf2ae4dc7cac598c, s.Struct)
	return str
}

func (s RwFile_truncate_Params) Size() uint64 {
	return s.Struct.Uint64(0)
}

func (s RwFile_truncate_Params) SetSize(v uint64) {
	s.Struct.SetUint64(0, v)
}

// RwFile_truncate_Params_List is a list of RwFile_truncate_Params.
type RwFile_truncate_Params_List struct{ capnp.List }

// NewRwFile_truncate_Params creates a new list of RwFile_truncate_Params.
func NewRwFile_truncate_Params_List(s *capnp.Segment, sz int32) (RwFile_truncate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RwFile_truncate_Params_List{l}, err
}

func (s RwFile_truncate_Params_List) At(i int) RwFile_truncate_Params {
	return RwFile_truncate_Params{s.List.Struct(i)}
}

func (s RwFile_truncate_Params_List) Set(i int, v RwFile_truncate_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_truncate_Params_List) String() string {
	str, _ := text.MarshalList(0xbf2ae4dc7cac598c, s.List)
	return str
}

// RwFile_truncate_Params_Future is a wrapper for a RwFile_truncate_Params promised by a client call.
type RwFile_truncate_Params_Future struct{ *capnp.Future }

func (p RwFile_truncate_Params_Future) Struct() (RwFile_truncate_Params, error) {
	s, err := p.Future.Struct()
	return RwFile_truncate_Params{s}, err
}

type RwFile_truncate_Results struct{ capnp.Struct }

// RwFile_truncate_Results_TypeID is the unique identifier for the type RwFile_truncate_Results.
const RwFile_truncate_Results_TypeID = 0xf101f68e2a8fff80

func NewRwFile_truncate_Results(s *capnp.Segment) (RwFile_truncate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_truncate_Results{st}, err
}

func NewRootRwFile_truncate_Results(s *capnp.Segment) (RwFile_truncate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_truncate_Results{st}, err
}

func ReadRootRwFile_truncate_Results(msg *capnp.Message) (RwFile_truncate_Results, error) {
	root, err := msg.Root()
	return RwFile_truncate_Results{root.Struct()}, err
}

func (s RwFile_truncate_Results) String() string {
	str, _ := text.Marshal(0xf101f68e2a8fff80, s.Struct)
	return str
}

// RwFile_truncate_Results_List is a list of RwFile_truncate_Results.
type RwFile_truncate_Results_List struct{ capnp.List }

// NewRwFile_truncate_Results creates a new list of RwFile_truncate_Results.
func NewRwFile_truncate_Results_List(s *capnp.Segment, sz int32) (RwFile_truncate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RwFile_truncate_Results_List{l}, err
}

func (s RwFile_truncate_Results_List) At(i int) RwFile_truncate_Results {
	return RwFile_truncate_Results{s.List.Struct(i)}
}

func (s RwFile_truncate_Results_List) Set(i int, v RwFile_truncate_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_truncate_Results_List) String() string {
	str, _ := text.MarshalList(0xf101f68e2a8fff80, s.List)
	return str
}

// RwFile_truncate_Results_Future is a wrapper for a RwFile_truncate_Results promised by a client call.
type RwFile_truncate_Results_Future struct{ *capnp.Future }

func (p RwFile_truncate_Results_Future) Struct() (RwFile_truncate_Results, error) {
	s, err := p.Future.Struct()
	return RwFile_truncate_Results{s}, err
}

type RwFile_setExec_Params struct{ capnp.Struct }

// RwFile_setExec_Params_TypeID is the unique identifier for the type RwFile_setExec_Params.
const RwFile_setExec_Params_TypeID = 0xc799a0caf614d135

func NewRwFile_setExec_Params(s *capnp.Segment) (RwFile_setExec_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_setExec_Params{st}, err
}

func NewRootRwFile_setExec_Params(s *capnp.Segment) (RwFile_setExec_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RwFile_setExec_Params{st}, err
}

func ReadRootRwFile_setExec_Params(msg *capnp.Message) (RwFile_setExec_Params, error) {
	root, err := msg.Root()
	return RwFile_setExec_Params{root.Struct()}, err
}

func (s RwFile_setExec_Params) String() string {
	str, _ := text.Marshal(0xc799a0caf614d135, s.Struct)
	return str
}

func (s RwFile_setExec_Params) Exec() bool {
	return s.Struct.Bit(0)
}

func (s RwFile_setExec_Params) SetExec(v bool) {
	s.Struct.SetBit(0, v)
}

// RwFile_setExec_Params_List is a list of RwFile_setExec_Params.
type RwFile_setExec_Params_List struct{ capnp.List }

// NewRwFile_setExec_Params creates a new list of RwFile_setExec_Params.
func NewRwFile_setExec_Params_List(s *capnp.Segment, sz int32) (RwFile_setExec_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RwFile_setExec_Params_List{l}, err
}

func (s RwFile_setExec_Params_List) At(i int) RwFile_setExec_Params {
	return RwFile_setExec_Params{s.List.Struct(i)}
}

func (s RwFile_setExec_Params_List) Set(i int, v RwFile_setExec_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_setExec_Params_List) String() string {
	str, _ := text.MarshalList(0xc799a0caf614d135, s.List)
	return str
}

// RwFile_setExec_Params_Future is a wrapper for a RwFile_setExec_Params promised by a client call.
type RwFile_setExec_Params_Future struct{ *capnp.Future }

func (p RwFile_setExec_Params_Future) Struct() (RwFile_setExec_Params, error) {
	s, err := p.Future.Struct()
	return RwFile_setExec_Params{s}, err
}

type RwFile_setExec_Results struct{ capnp.Struct }

// RwFile_setExec_Results_TypeID is the unique identifier for the type RwFile_setExec_Results.
const RwFile_setExec_Results_TypeID = 0xddad3e0282b03294

func NewRwFile_setExec_Results(s *capnp.Segment) (RwFile_setExec_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_setExec_Results{st}, err
}

func NewRootRwFile_setExec_Results(s *capnp.Segment) (RwFile_setExec_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RwFile_setExec_Results{st}, err
}

func ReadRootRwFile_setExec_Results(msg *capnp.Message) (RwFile_setExec_Results, error) {
	root, err := msg.Root()
	return RwFile_setExec_Results{root.Struct()}, err
}

func (s RwFile_setExec_Results) String() string {
	str, _ := text.Marshal(0xddad3e0282b03294, s.Struct)
	return str
}

// RwFile_setExec_Results_List is a list of RwFile_setExec_Results.
type RwFile_setExec_Results_List struct{ capnp.List }

// NewRwFile_setExec_Results creates a new list of RwFile_setExec_Results.
func NewRwFile_setExec_Results_List(s *capnp.Segment, sz int32) (RwFile_setExec_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return RwFile_setExec_Results_List{l}, err
}

func (s RwFile_setExec_Results_List) At(i int) RwFile_setExec_Results {
	return RwFile_setExec_Results{s.List.Struct(i)}
}

func (s RwFile_setExec_Results_List) Set(i int, v RwFile_setExec_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RwFile_setExec_Results_List) String() string {
	str, _ := text.MarshalList(0xddad3e0282b03294, s.List)
	return str
}

// RwFile_setExec_Results_Future is a wrapper for a RwFile_setExec_Results promised by a client call.
type RwFile_setExec_Results_Future struct{ *capnp.Future }

func (p RwFile_setExec_Results_Future) Struct() (RwFile_setExec_Results, error) {
	s, err := p.Future.Struct()
	return RwFile_setExec_Results{s}, err
}

const schema_e91f231103c0780e = "x\xda\x9cWml\x1c\xd5\x15\xbdwf\x97\xdd\xf1\xce" +
	"\xb2~\x8c1$)\xb2Bm)\xb8\x89\x9b\x98\xd2\x12" +
	"\xabt\x97\xc8nH\x08\x95'N?\x92\xb4\x82\xb1w" +
	"\"V\xd9\x0f3;\x9b\x8diE\x1aG\xadS\xa9i" +
	"\x14\x09WJ\xaa\x94\x16\x95V G\xa5\x94\xd4?J" +
	"(\xb2\x84\\(\x06\x82\xfa\xa5\xd2\xc8T\xd0RJ\x9d" +
	"\x02\xad\xa3\x1a0S\xdd7\xfbf\x86\xf5\xd8\x8e\xfbo" +
	"5\xef\xbds\xcf\xbb\xf7\xdc\xf3\xeen\xfcC$#m" +
	"\x8a~\xbc\x11@\x7f\"z\x85\xf3N\xb9m\xac8\xd6" +
	"w\x04\xd8\x1a\x04\x88b\x0c\xe0\xc6\xf9\xd8\x16\x04\xd4\xa2" +
	"\xf14\xa0\xa3\xec-\xde?{\xfc\xe5#\xc0\xae\xf56" +
	"\xb4\xc5;i\xc3\x06\xbe\xa1\xf3\xb9S\xd6}\xf9\xb3G" +
	"\x81\xad\x95\x9d\xe3\xa7.>\xfe\xd5\x91\xfb\x9e\x07\xc0\x1b" +
	"\xef\x88oA\xed+\xf1\x18\x80\xb6;>\xa2=L\xbf" +
	"\xa6\x8dGq\xf5\xc1]\xa3\x8c\xc9\xce\x95\x07\x9f\x92\xd9" +
	"G[\xde\x00@\xedD\xfc1\xed$\xdf:\x1a\xdf\xaa" +
	"\x9d\xa3_\xce\x93\x9fj\xfb\xb1\xfa\xb1\xe6\xef\x01k\xf6" +
	"\"?\x14_M\x91\xcf\xf0\xc8\xe7n?z\xd7-\xda" +
	"\xdeG\xa0\x1em*\xfe\x98\xf6;\x8ev>\xbeU\x9b" +
	"\x8b_\x03\xe0\\\xac\x0e?\xb4\xfb[\xfb\x7f\x16\xbc\xe8" +
	"\x1b\xf1.B{\x9b\xa3\xf5\x15\x1f\xe8[\x8b\x87\x1f_" +
	"\x80\xc6\x94\x09m\x95BhW+\x93\xda\x09\x85\xd0\xde" +
	"\x8d\xfc\xd7\xfc\xc8\xed\xd5q`\xd7yh\x87\x95=\x84" +
	"vL!\xb4\xdf\xfc\xb0\xe7\x95\x7f[\xf3\xbf\x04\xb6\x0e" +
	"\x01\"\xb4~Fy\x04!\xe2\xfc\xf6\xcd5\xdd7\xbd" +
	"n>\x19X9\xad<H+\xdf\xde=\xf6\xb5?\xbf" +
	"\xd6\xfe+\xd0\xafE\xb1tL\xe1\xb5\x18\xe5\xa0\xef\x9c" +
	"\x1c\xbc\xf7\xd7\xf9\xab&\xdc;\xf0\xf5\xb3\xb4\x1eq~" +
	"\xd1p\xe8\xc0=/f'\x82|N+;\xe9\xe8\xc3" +
	"\xfc\xa85\xb1\xf1\xe2\xb1g\xef|\x1a\xf4\xd5(9\xc3" +
	"O\x1dxmxb\xdb$4\xc5\x10@{Fy\x97" +
	"\xb2\xc67zK:C\xc9\xcfCwL\x02\xd0f\x94" +
	"\x97\xb49\x9e\x8aY\xe5u@\xe7\xa6\xf3M\x97\x9e\xfd" +
	"\xc1\xc9\xc9 \xe3\xb3\x0d<\xa9\xe7\x1a\x08\xedD\xb6\xf4" +
	"\x85\x7f\x0d\xcd?\x13\xcc\xfa\x05w\xc3_\xf9\x86\xee\xa9" +
	"#]oU^~.H<\x9a\xe8\xa7\x0d,A\x1b" +
	"\xde\x7feh\xeb\xae\xcd\x1b\x9f_P\x96M\x89?i" +
	"\xb7$\xae\x01\xd0z\x12#\xda(\xfd\xf2\xe5\xc7\xd6\x04" +
	"NF%B\xfdF\xa2\x01\xddm\xda\xe9D\x95\x0a\xfe" +
	"\x9f\x91\xf7~\xf4\x84\xfcB0\xf4\\\x82\xd70\xaaR" +
	"\xe8\x86\xf5;\xbe\xf9\x93\xb1\xbf\xff\xde\x15 \xbf\\\x9b" +
	"\xba\x9a\xd2}\x7f\xe7\xa3\xc3\xd2g\xce\\p\x9b\x82\xaf" +
	"$U^\x88\xf7\xa7\x9f\x9e\xfd\xe4\xba\x0f\xa6\x17\xd0\x9d" +
	"M\xfcCC\x95R7\x9f\x98\xd4**\xd1]\xf3@" +
	"\xd3\xfa\xe9\x96\xcc?\x83\xe93\xd5vbP\xe0\x0c\xfa" +
	"\xc7\xefi\xee;u\xfdL\x80\xc11\xf5*\x8aS\xfd" +
	"t\xff\x9e\x03\xe3\x7f\x9c\x01\xfd:\xf4\xd8WT\xce\xfe" +
	"\xb0J\xd7\xfb\xbas\xbc\xfd;\x97\xf0\xed\x00\xc7\xbf\xa8" +
	"\xdb\xe9\xecm\xfd\xc3G\xbf[j\xbe\xe4*\xd0=:" +
	"\xa5>HG/\xf0\xb0m?\x1f\x1f\xdc\x9b\xbfu." +
	" \xd1d\x92\x8b\xf7\xcd\x99\xf3/\xce\"{\x0f\xf4f" +
	"\x94<\xbf J\xa8E\x93?\x05t\xdezid\xdd" +
	"\xdf^M:nV]y'\xfb\x11\xbe\xef\xec\xcb\xe5" +
	"\xcd\xf2P\xd9\x8e\x98\x85\x8e\x01c\xb08\xd8\xd5\x9d\xb3" +
	"\xcc\x01\xbbd\x0duT\x8d\xfc\xfe\xd6\x9df\xb9\x92\xb7" +
	"\xcb\xa0G\xe4\x08@\x04\x01X\xb2\x1d@\x8f\xcb\xa87" +
	"I\x98*\x96\xb2&2a!\x80\xc8\x00=T\xd9C" +
	"\xddY\xfdl.ovT\xad\x9cm\xb6\xee4[8" +
	"\xe8b\x98\xe5\\q?2\xe7\xceW_\xb8\xa1z\xf3" +
	"\x17\xa7\xa0\x0e5\x8ckO\xd1\xb6\x86:\xfal\xcb4" +
	"\x0a\xd0\x8b\xa8\xc7\xe5(\x80\x97U\x14\xad\xcf6\xb5\x83" +
	"\xc4\xdab\x88^\xcf\xa3\xc8,[Ek\xc9Xj\xb0" +
	"R\xbe;\x83\xa9l\xa9hf\xb0\x17\xfd\xc8(\"\xb7" +
	"t}\xae\x945)N\x84\xc7\x11\x9a@\xe1\x8f\x8c\x11" +
	"V4\x96*\xdb\x86\xfda\x10?)\x84\xd1A\x1b\xdc" +
	",\xcb\x8bg$W\xdcW\xc2F\xdf\x07\x00\xb1\x11B" +
	"yQ\x9a}^B\x1a(\xda\xc6\xe3e\x99F6\x83" +
	"z\x04\xd1\xab\x1d\x84P\xacSC\xba\xd7\xb0\x8c\xc2\xa2" +
	"4\x8bF\xc1D\x15$T\x03\xe4\xa4:\x11\xf0\xf2\xa8" +
	"\x9c\x9e\xe85\x14\x0f\x1a\xd3;Ab=T\x1ea\xbc" +
	"(z\x86m\xde\x0e\x12\xdb\x14C\xc9\xb38\x14=\xcf" +
	"\xda\xb6\x80\xc4V\xc5Z\xb8\xc02\xe8\xd8V\xa58`" +
	"\xd8&\x00d\xf0P\xd9\xb4{\x0e\x9a\x03\xee}\xfd'" +
	"*p\xe3H\x80\xa4\x7f\xe7\xc2\xfel\xce\x0a-\xce\xf5" +
	"\xfe\xadc\xd9\x9c\x85\xcc7\x99:\xb5F\x97Qk\x07" +
	"\xa9\x8db\xa4\xa8%.\xff\x18\xa9\xb3\xb5\xd7\xb0bF" +
	"\xa1\x1cz\x0d\xdep\"\x0f\xadn\xe1`\xf1\x96\xbb\xd7" +
	"D\x05$T\x02\xd4\x95\x10\x0e\xf9\\\xd9\xf6LAl" +
	"\\\"y<.\xfe\xbf\x8a\xe9\xb3\x0d{[q_\xba" +
	"\xd4Ak\x04\xd2\x88M\x18\xce>\x0a\x12F\x97B\xc1" +
	"\x12)\xafQ\x8e\xa8\x8e\xc3\x99\x18T\xc5/\xcb\xa8\xdf" +
	"-a\x12?p0\xf0$3\x93\x1aEjl\"K" +
	"ew\xec\x01\xd0w\xc8\xa8\x7fIB&\xb3&\x94\x01" +
	"\xd8\xe7\xb7\x03\xe8\xbbd\xd4\xefrE\x00W\xa4(\xb6" +
	"c\x1e4\x07*\xb6\xd1\x0fr\xdeD\x04\x09\x11\xd0!" +
	"a\x1a\xfdy\x12\xa4\xf7mQ\x9b\xac\xe9u\xb9v\xa3" +
	"@K\x80\xd5\x15-\x04\xac\xcb\x07K\x97\xb9\xac\x90\xf9" +
	"\xb3\xe3\xa2\xb6\x1b\xac\xf2\x80e\x1a\xdc\xd2\xcb\x95\xd8\x12" +
	"\x96N \xc8\xfcy\xae\x0e[\xaa'-[C\xbcW" +
	"\xfd\xe1\x01;[\xb8\xfek\xce.\x86\x18\x14\xf3W\xc0" +
	"\xd9\xc5X\x89b\x90\xf6\x9c\x9d\x12\x91\xc1\x14y\xd9\x8a" +
	"\xcc\x8fG\x06\xe0\x94\xfc\xd9\x1a\xbb\xd2n3\xeaq\xef" +
	"\xd67\xd0\xad[e\xd47J\xc8\xb0&\xd6\x0d\xf4q" +
	"\x9d\x8c\xfa'\xea$\xbf\x9c\xb1\x87\xe7<k\xe6\xcdZ" +
	"K\xcb+4c\xffr\\h\xf4\x0ax\xfe\xe6m\x8a" +
	"-\xa6\xc7\xe5\xfa>E\xf4|{\x17\xf3\x10\x8a\x81\x92" +
	"\xe9]\xc2\xde\xc5p\x8cbjg\x9b\xc9\xfa7\x90\xbd" +
	"\x8b!\x10\xc5\xdc\xc2\xd6\xd2\xb9\xabciWm\x19l" +
	"\xe1\xe6\x92\xc1\xb4\x9b\x8a\x9a\xb1{\xc3eh5?4" +
	"\x82\xf4\x1a\xa9\xfaf\xd8\xe2\xe7\xeeP\xd96,\xfbV" +
	"{\x81\xa7\x84\xbd\xdd5\x87\xbb\xbc>\x115\x0b\x17\x8c" +
	"\xa7\x17\xb2\x9b\xf52\xea7\xd7\xd71\xd4[\x96w\x7f" +
	"Q8X\xe1\xb3T{_\xc2\xd2\xd4*\xe1!\xb3h" +
	"[9\xb3\x8cW\x02\xf6\xca\x88\x8d\xc1\xbf\x9a\xf4q\x85" +
	"\xaf\xd9\x82G0L\xad\xe2AQ=J=D)#" +
	"\xa3\xbe#\xd0r\xdb\xc8\xdb\xbae\xd4{%D\xa9\xe6" +
	"\xe2\x94\xea\xdbd\xd4w-,q\xda(\x94*E[" +
	"\xbc\x81\x97?\x83\x864\xa60\xc3\xff\x05\x00\x00\xff\xff" +
	"\xde\xd5\x8e\xa3"

func init() {
	schemas.Register(schema_e91f231103c0780e,
		0x8353ac6eac2573f2,
		0x83db8ff5946e5b09,
		0x88b56c7e729acc32,
		0x955400781a01b061,
		0x9b162b0ca62537be,
		0xaa5b133d60884bbd,
		0xb16b8959a58277ee,
		0xb4810121539f6e53,
		0xb7774b1c65f804fa,
		0xbbfd72f3e045a1cb,
		0xbe65e735441bebd4,
		0xbf2ae4dc7cac598c,
		0xc2126cc87a7099f2,
		0xc264d071767f0ab6,
		0xc55fca8dee30c272,
		0xc749c282e476c082,
		0xc799a0caf614d135,
		0xc9fd79ef566f6491,
		0xccdb75f03a83cd44,
		0xce3039544779e0fc,
		0xce7e877bb4ee9a8f,
		0xcf03bca4fb87f453,
		0xd6e8aca7864c2c0a,
		0xddad3e0282b03294,
		0xdffe2836f5c5dffc,
		0xec401fdf2c149f1b,
		0xed229a531671b762,
		0xedd8b7765a623c77,
		0xf101f68e2a8fff80,
		0xf6166f9688826248,
		0xf9416c5b70b7b325,
		0xfb1101f5d0d1edeb,
		0xff0de3e62887d2f0)
}
