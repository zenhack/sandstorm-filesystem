// Code generated by capnpc-go. DO NOT EDIT.

package main

import (
	context "context"
	filesystem "zenhack.net/go/sandstorm-filesystem/filesystem"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Bootstrap struct{ Client *capnp.Client }

// Bootstrap_TypeID is the unique identifier for the type Bootstrap.
const Bootstrap_TypeID = 0x980f7869d05eec4b

func (c Bootstrap) Rootfs(ctx context.Context, params func(Bootstrap_rootfs_Params) error) (Bootstrap_rootfs_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x980f7869d05eec4b,
			MethodID:      0,
			InterfaceName: "preload_server.capnp:Bootstrap",
			MethodName:    "rootfs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Bootstrap_rootfs_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Bootstrap_rootfs_Results_Future{Future: ans.Future()}, release
}

// A Bootstrap_Server is a Bootstrap with a local implementation.
type Bootstrap_Server interface {
	Rootfs(context.Context, Bootstrap_rootfs) error
}

// Bootstrap_NewServer creates a new Server from an implementation of Bootstrap_Server.
func Bootstrap_NewServer(s Bootstrap_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Bootstrap_Methods(nil, s), s, c, policy)
}

// Bootstrap_ServerToClient creates a new Client from an implementation of Bootstrap_Server.
// The caller is responsible for calling Release on the returned Client.
func Bootstrap_ServerToClient(s Bootstrap_Server, policy *server.Policy) Bootstrap {
	return Bootstrap{Client: capnp.NewClient(Bootstrap_NewServer(s, policy))}
}

// Bootstrap_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Bootstrap_Methods(methods []server.Method, s Bootstrap_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x980f7869d05eec4b,
			MethodID:      0,
			InterfaceName: "preload_server.capnp:Bootstrap",
			MethodName:    "rootfs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Rootfs(ctx, Bootstrap_rootfs{call})
		},
	})

	return methods
}

// Bootstrap_rootfs holds the state for a server call to Bootstrap.rootfs.
// See server.Call for documentation.
type Bootstrap_rootfs struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Bootstrap_rootfs) Args() Bootstrap_rootfs_Params {
	return Bootstrap_rootfs_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Bootstrap_rootfs) AllocResults() (Bootstrap_rootfs_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bootstrap_rootfs_Results{Struct: r}, err
}

type Bootstrap_rootfs_Params struct{ capnp.Struct }

// Bootstrap_rootfs_Params_TypeID is the unique identifier for the type Bootstrap_rootfs_Params.
const Bootstrap_rootfs_Params_TypeID = 0x8cf87a8f7e065e42

func NewBootstrap_rootfs_Params(s *capnp.Segment) (Bootstrap_rootfs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Bootstrap_rootfs_Params{st}, err
}

func NewRootBootstrap_rootfs_Params(s *capnp.Segment) (Bootstrap_rootfs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Bootstrap_rootfs_Params{st}, err
}

func ReadRootBootstrap_rootfs_Params(msg *capnp.Message) (Bootstrap_rootfs_Params, error) {
	root, err := msg.Root()
	return Bootstrap_rootfs_Params{root.Struct()}, err
}

func (s Bootstrap_rootfs_Params) String() string {
	str, _ := text.Marshal(0x8cf87a8f7e065e42, s.Struct)
	return str
}

// Bootstrap_rootfs_Params_List is a list of Bootstrap_rootfs_Params.
type Bootstrap_rootfs_Params_List struct{ capnp.List }

// NewBootstrap_rootfs_Params creates a new list of Bootstrap_rootfs_Params.
func NewBootstrap_rootfs_Params_List(s *capnp.Segment, sz int32) (Bootstrap_rootfs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Bootstrap_rootfs_Params_List{l}, err
}

func (s Bootstrap_rootfs_Params_List) At(i int) Bootstrap_rootfs_Params {
	return Bootstrap_rootfs_Params{s.List.Struct(i)}
}

func (s Bootstrap_rootfs_Params_List) Set(i int, v Bootstrap_rootfs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Bootstrap_rootfs_Params_List) String() string {
	str, _ := text.MarshalList(0x8cf87a8f7e065e42, s.List)
	return str
}

// Bootstrap_rootfs_Params_Future is a wrapper for a Bootstrap_rootfs_Params promised by a client call.
type Bootstrap_rootfs_Params_Future struct{ *capnp.Future }

func (p Bootstrap_rootfs_Params_Future) Struct() (Bootstrap_rootfs_Params, error) {
	s, err := p.Future.Struct()
	return Bootstrap_rootfs_Params{s}, err
}

type Bootstrap_rootfs_Results struct{ capnp.Struct }

// Bootstrap_rootfs_Results_TypeID is the unique identifier for the type Bootstrap_rootfs_Results.
const Bootstrap_rootfs_Results_TypeID = 0xc71f4b4bb76663e2

func NewBootstrap_rootfs_Results(s *capnp.Segment) (Bootstrap_rootfs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bootstrap_rootfs_Results{st}, err
}

func NewRootBootstrap_rootfs_Results(s *capnp.Segment) (Bootstrap_rootfs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Bootstrap_rootfs_Results{st}, err
}

func ReadRootBootstrap_rootfs_Results(msg *capnp.Message) (Bootstrap_rootfs_Results, error) {
	root, err := msg.Root()
	return Bootstrap_rootfs_Results{root.Struct()}, err
}

func (s Bootstrap_rootfs_Results) String() string {
	str, _ := text.Marshal(0xc71f4b4bb76663e2, s.Struct)
	return str
}

func (s Bootstrap_rootfs_Results) Dir() filesystem.RwDirectory {
	p, _ := s.Struct.Ptr(0)
	return filesystem.RwDirectory{Client: p.Interface().Client()}
}

func (s Bootstrap_rootfs_Results) HasDir() bool {
	return s.Struct.HasPtr(0)
}

func (s Bootstrap_rootfs_Results) SetDir(v filesystem.RwDirectory) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Bootstrap_rootfs_Results_List is a list of Bootstrap_rootfs_Results.
type Bootstrap_rootfs_Results_List struct{ capnp.List }

// NewBootstrap_rootfs_Results creates a new list of Bootstrap_rootfs_Results.
func NewBootstrap_rootfs_Results_List(s *capnp.Segment, sz int32) (Bootstrap_rootfs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Bootstrap_rootfs_Results_List{l}, err
}

func (s Bootstrap_rootfs_Results_List) At(i int) Bootstrap_rootfs_Results {
	return Bootstrap_rootfs_Results{s.List.Struct(i)}
}

func (s Bootstrap_rootfs_Results_List) Set(i int, v Bootstrap_rootfs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Bootstrap_rootfs_Results_List) String() string {
	str, _ := text.MarshalList(0xc71f4b4bb76663e2, s.List)
	return str
}

// Bootstrap_rootfs_Results_Future is a wrapper for a Bootstrap_rootfs_Results promised by a client call.
type Bootstrap_rootfs_Results_Future struct{ *capnp.Future }

func (p Bootstrap_rootfs_Results_Future) Struct() (Bootstrap_rootfs_Results, error) {
	s, err := p.Future.Struct()
	return Bootstrap_rootfs_Results{s}, err
}

func (p Bootstrap_rootfs_Results_Future) Dir() filesystem.RwDirectory {
	return filesystem.RwDirectory{Client: p.Future.Field(0, nil).Client()}
}

const schema_fa27741246fb0c93 = "x\xda2Hbr`2d\xed\x17d`\x08<\xc3" +
	"\xca\xf6\xdf)\x8e\xad\xae\xbf\xeaG\x0f\x83\xa0<#\x03" +
	"\x03\x0b;\x03\x83\xf1Z\x8e,F\x06\x96\xff\xdeo\xe2" +
	".dV\xf0\xcf`\x10\x14e\xfe?\x99\xe7\xb7\x9bP" +
	"\x89\xfa/\x06\x06F\xe1\x99\x1c\xbf\x84\x97r\xb030" +
	"\x08/\xe4p\x17>\x09b\xfd\x7f\x94\x9c\xb6\xdd\xdb[" +
	"\xfe8\xc4\x18VF\x909\x1b9\x8a\x18\x19\x18\x85\xf7" +
	"r\xd83\xfcg\xf8\xcf \xf8\xbf\xa0(5'?1" +
	"%\x9e\xa58\xb5\xa8,\xb5H/9\xb1 \xaf\xc0\xca" +
	")?\xbf\xa4\xb8\xa4(\xb1@\xaf(?\xbf$\xadX" +
	"% \x91\xbf(1\xb7\x18\xae\x9c\x09]\xb9=D}" +
	"\x00#c \x0b3+\x03\x03\xdc\x13\x8c0g\x08\x0a" +
	"Z10\x09\xb2\xb2\xdbC\x8ct`\x0c`d$\xd6" +
	"\xfa\xa0T\xf9\xe2\xd2\x9c\x92\xe2@\x16f\x16\x06\x06\x16" +
	"F\x06\x06A^%\x06\x86@\x0ef\xc6@\x11&F" +
	"\xf6\x94\xcc\"F\xc1\xff\x7f\xee\x1f\xfdj\xa6\xf1\xef>" +
	"\x03\x03#\xa3 \x03# \x00\x00\xff\xff\xa0\xf9jh"

func init() {
	schemas.Register(schema_fa27741246fb0c93,
		0x8cf87a8f7e065e42,
		0x980f7869d05eec4b,
		0xc71f4b4bb76663e2)
}
